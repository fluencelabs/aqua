module ServiceDist declares *

import "run-builtins/run-builtins.aqua"
import "@fluencelabs/aqua-lib/builtin.aqua"
import "@fluencelabs/aqua-ipfs/ipfs.aqua"

export deploy, remove, createService, addBlueprint

data ModuleConf:
  name: string
  path: string
  mounted_binaries: ?[][]string
  preopened_files: ?[]string
  mapped_dirs: ?[][]string
  envs: ?[][]string
  logger_enabled: ?bool
  logging_mask: ?i32
  mem_pages_count: ?u32
  max_heap_size: ?string

data ServiceConf:
  modules: []ModuleConf

const ON_PEER ?= HOST_PEER_ID

func flattenSS(input: [][]string) -> ?[][]string:
  res: *[][]string
  res <<- input
  <- res

func flattenS(input: []string) -> ?[]string:
  res: *[]string
  res <<- input
  <- res

func deploy(serviceName: string, serviceConf: ServiceConf) -> string:

  on ON_PEER:
    multiaddr <- Ipfs.get_external_api_multiaddr()

--  Console.print("BEFORE THAT")
  mod_hashes: *string
  for m <- serviceConf.modules:
      -- TODO check for cache
      Console.print("Going to upload a module...")
      uploadRes <- LocalIpfs.uploadFile(m.path, multiaddr)
      cid = uploadRes.cid
--      Console.print(cid)
      on ON_PEER:
        hostRes <- Ipfs.get(cid)

--      Console.print(hostRes.path)
--      on ON_PEER:

        conf <- Dist.make_module_config(m.name, m.mem_pages_count, m.max_heap_size, m.logger_enabled, m.preopened_files, m.envs, m.mapped_dirs, m.mounted_binaries, m.logging_mask)

--      Console.print("Created config")

--      on ON_PEER:

        mod <- Dist.add_module_from_vault(hostRes.path, conf)

        mod_hashes <- Op.concat_strings("hash:", mod)

  Console.print("Now time to make a blueprint...")
  on ON_PEER:

        blueprint <- Dist.make_blueprint(serviceName, mod_hashes)

  --Console.print("Got blueprint")
  --on ON_PEER:
        blueprint_id <- Dist.add_blueprint(blueprint)

        service_id <- Srv.create(blueprint_id)

  Console.print("Blueprint id:")
  Console.print(blueprint_id)
  Console.print("And your service id is:")

  <- service_id

func remove(service_id: string):
  on ON_PEER:
    Srv.remove(service_id)
  Console.print("Service was deleted")

func createService(blueprint_id: string) -> string:
  on ON_PEER:
    service_id <- Srv.create(blueprint_id)
  <- service_id

func addBlueprint(bp: AddBlueprint) -> string:
  on ON_PEER:
    blueprint_id <- Dist.add_blueprint(bp)
  <- blueprint_id

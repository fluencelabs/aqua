module ServiceDist declares *

import "run-builtins/run-builtins.aqua"
import "@fluencelabs/aqua-lib/builtin.aqua"
import "@fluencelabs/aqua-ipfs/ipfs.aqua"

export deploy, remove, createService, addBlueprint

data ModuleConf:
  name: string
  path: string
  mounted_binaries: ?[][]string
  preopened_files: ?[]string
  mapped_dirs: ?[][]string
  envs: ?[][]string
  logger_enabled: ?bool
  logging_mask: ?i32
  mem_pages_count: ?u32
  max_heap_size: ?string

service OpC("op"):
  array_length(arr: []ModuleConf) -> u32

data DeployResult:
  blueprint_id: string
  service_id: string

service DeployHelper("deploy_helper"):
  create_result(bid: string, sid: string) -> DeployResult

data ServiceConf:
  modules: []ModuleConf

const ON_PEER ?= HOST_PEER_ID

func flattenSS(input: [][]string) -> ?[][]string:
  res: *[][]string
  res <<- input
  <- res

func flattenS(input: []string) -> ?[]string:
  res: *[]string
  res <<- input
  <- res

func deploy(serviceName: string, serviceConf: ServiceConf) -> DeployResult:

  on ON_PEER:
    multiaddr <- Ipfs.get_external_api_multiaddr()

  mod_hashes: *string
  for m <- serviceConf.modules par:
      -- TODO check for cache
      Console.print(Op.concat_strings("Going to upload a module: ", m.name))
      uploadRes <- LocalIpfs.uploadFile(m.path, multiaddr)
      cid = uploadRes.cid
      Console.print(Op.concat_strings(Op.concat_strings("Module '", m.name), "' was uploaded"))

      on ON_PEER:
        hostRes <- Ipfs.get(cid)

        conf <- Dist.make_module_config(m.name, m.mem_pages_count, m.max_heap_size, m.logger_enabled, m.preopened_files, m.envs, m.mapped_dirs, m.mounted_binaries, m.logging_mask)

        mod <- Dist.add_module_from_vault(hostRes.path, conf)

        mod_hashes <- Op.concat_strings("hash:", mod)

  join mod_hashes[OpC.array_length(serviceConf.modules) - 1]

  Console.print("Now time to make a blueprint...")
  on ON_PEER:
        blueprint <- Dist.make_blueprint(serviceName, mod_hashes)
        blueprint_id <- Dist.add_blueprint(blueprint)  
        service_id <- Srv.create(blueprint_id)

  res <- DeployHelper.create_result(blueprint_id, service_id)
  <- res

func remove(service_id: string):
  on ON_PEER:
    Srv.remove(service_id)
  Console.print("Service was deleted")

func createService(blueprint_id: string) -> string:
  on ON_PEER:
    service_id <- Srv.create(blueprint_id)
  <- service_id

func addBlueprint(bp: AddBlueprint) -> string:
  on ON_PEER:
    blueprint_id <- Dist.add_blueprint(bp)
  <- blueprint_id

/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.5.1-SNAPSHOT
 *
 */
import { Fluence, FluencePeer } from '@fluencelabs/fluence';
import {
    CallParams,
    callFunction,
    registerService,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v2.js';


// Services

// Functions
 

export function set_timeout(
    node: string,
    timeout_sec: number,
    config?: {ttl?: number}
): Promise<void>;

export function set_timeout(
    peer: FluencePeer,
    node: string,
    timeout_sec: number,
    config?: {ttl?: number}
): Promise<void>;

export function set_timeout(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                         (call %init_peer_id% ("getDataSrv" "node") [] node)
                        )
                        (call %init_peer_id% ("getDataSrv" "timeout_sec") [] timeout_sec)
                       )
                       (call -relay- ("op" "noop") [])
                      )
                      (xor
                       (call node ("aqua-ipfs" "set_timeout") [timeout_sec])
                       (seq
                        (call -relay- ("op" "noop") [])
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                       )
                      )
                     )
                     (seq
                      (call -relay- ("op" "noop") [])
                      (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                     )
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "set_timeout",
    "returnType" : {
        "tag" : "void"
    },
    "argDefs" : [
        {
            "name" : "node",
            "argType" : {
                "tag" : "primitive"
            }
        },
        {
            "name" : "timeout_sec",
            "argType" : {
                "tag" : "primitive"
            }
        }
    ],
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function get_and_cache(
    node: string,
    cid: string,
    from: string,
    error: (arg0: string, arg1: string, callParams: CallParams<'arg0' | 'arg1'>) => void | Promise<void>,
    config?: {ttl?: number}
): Promise<string | null>;

export function get_and_cache(
    peer: FluencePeer,
    node: string,
    cid: string,
    from: string,
    error: (arg0: string, arg1: string, callParams: CallParams<'arg0' | 'arg1'>) => void | Promise<void>,
    config?: {ttl?: number}
): Promise<string | null>;

export function get_and_cache(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                          (call %init_peer_id% ("getDataSrv" "node") [] node)
                         )
                         (call %init_peer_id% ("getDataSrv" "cid") [] cid)
                        )
                        (call %init_peer_id% ("getDataSrv" "from") [] from)
                       )
                       (new $localCid
                        (seq
                         (seq
                          (seq
                           (call -relay- ("op" "noop") [])
                           (xor
                            (seq
                             (call node ("aqua-ipfs" "get_from") [cid from] get)
                             (xor
                              (match get.$.success! true
                               (xor
                                (seq
                                 (call node ("aqua-ipfs" "put") [get.$.path!] put)
                                 (xor
                                  (match put.$.success! true
                                   (xor
                                    (ap put.$.hash! $localCid)
                                    (seq
                                     (call -relay- ("op" "noop") [])
                                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                                    )
                                   )
                                  )
                                  (par
                                   (seq
                                    (call -relay- ("op" "noop") [])
                                    (xor
                                     (call %init_peer_id% ("callbackSrv" "error") ["Ipfs.put failed" put.$.error!])
                                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                                    )
                                   )
                                   (null)
                                  )
                                 )
                                )
                                (seq
                                 (call -relay- ("op" "noop") [])
                                 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                                )
                               )
                              )
                              (par
                               (seq
                                (call -relay- ("op" "noop") [])
                                (xor
                                 (call %init_peer_id% ("callbackSrv" "error") ["Ipfs.get failed" get.$.error!])
                                 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                                )
                               )
                               (null)
                              )
                             )
                            )
                            (seq
                             (call -relay- ("op" "noop") [])
                             (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 5])
                            )
                           )
                          )
                          (call -relay- ("op" "noop") [])
                         )
                         (call %init_peer_id% ("op" "identity") [$localCid] localCid-fix)
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [localCid-fix])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 6])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 7])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "get_and_cache",
    "returnType" : {
        "tag" : "optional"
    },
    "argDefs" : [
        {
            "name" : "node",
            "argType" : {
                "tag" : "primitive"
            }
        },
        {
            "name" : "cid",
            "argType" : {
                "tag" : "primitive"
            }
        },
        {
            "name" : "from",
            "argType" : {
                "tag" : "primitive"
            }
        },
        {
            "name" : "error",
            "argType" : {
                "tag" : "callback",
                "callback" : {
                    "argDefs" : [
                        {
                            "name" : "arg0",
                            "argType" : {
                                "tag" : "primitive"
                            }
                        },
                        {
                            "name" : "arg1",
                            "argType" : {
                                "tag" : "primitive"
                            }
                        }
                    ],
                    "returnType" : {
                        "tag" : "void"
                    }
                }
            }
        }
    ],
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type Get_fromResult = { error: string; path: string; success: boolean; }
export function get_from(
    node: string,
    cid: string,
    from: string,
    config?: {ttl?: number}
): Promise<Get_fromResult>;

export function get_from(
    peer: FluencePeer,
    node: string,
    cid: string,
    from: string,
    config?: {ttl?: number}
): Promise<Get_fromResult>;

export function get_from(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                            (call %init_peer_id% ("getDataSrv" "node") [] node)
                           )
                           (call %init_peer_id% ("getDataSrv" "cid") [] cid)
                          )
                          (call %init_peer_id% ("getDataSrv" "from") [] from)
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (xor
                         (call node ("aqua-ipfs" "get_from") [cid from] result)
                         (seq
                          (call -relay- ("op" "noop") [])
                          (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                         )
                        )
                       )
                       (call -relay- ("op" "noop") [])
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [result])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "get_from",
    "returnType" : {
        "tag" : "primitive"
    },
    "argDefs" : [
        {
            "name" : "node",
            "argType" : {
                "tag" : "primitive"
            }
        },
        {
            "name" : "cid",
            "argType" : {
                "tag" : "primitive"
            }
        },
        {
            "name" : "from",
            "argType" : {
                "tag" : "primitive"
            }
        }
    ],
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type Get_local_api_multiaddrResult = { error: string; multiaddr: string; success: boolean; }
export function get_local_api_multiaddr(
    node: string,
    config?: {ttl?: number}
): Promise<Get_local_api_multiaddrResult>;

export function get_local_api_multiaddr(
    peer: FluencePeer,
    node: string,
    config?: {ttl?: number}
): Promise<Get_local_api_multiaddrResult>;

export function get_local_api_multiaddr(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                          (call %init_peer_id% ("getDataSrv" "node") [] node)
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (xor
                         (call node ("aqua-ipfs" "get_local_api_multiaddr") [] result)
                         (seq
                          (call -relay- ("op" "noop") [])
                          (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                         )
                        )
                       )
                       (call -relay- ("op" "noop") [])
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [result])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "get_local_api_multiaddr",
    "returnType" : {
        "tag" : "primitive"
    },
    "argDefs" : [
        {
            "name" : "node",
            "argType" : {
                "tag" : "primitive"
            }
        }
    ],
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type Get_external_swarm_multiaddrResult = { error: string; multiaddr: string; success: boolean; }
export function get_external_swarm_multiaddr(
    node: string,
    config?: {ttl?: number}
): Promise<Get_external_swarm_multiaddrResult>;

export function get_external_swarm_multiaddr(
    peer: FluencePeer,
    node: string,
    config?: {ttl?: number}
): Promise<Get_external_swarm_multiaddrResult>;

export function get_external_swarm_multiaddr(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                          (call %init_peer_id% ("getDataSrv" "node") [] node)
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (xor
                         (call node ("aqua-ipfs" "get_external_swarm_multiaddr") [] result)
                         (seq
                          (call -relay- ("op" "noop") [])
                          (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                         )
                        )
                       )
                       (call -relay- ("op" "noop") [])
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [result])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "get_external_swarm_multiaddr",
    "returnType" : {
        "tag" : "primitive"
    },
    "argDefs" : [
        {
            "name" : "node",
            "argType" : {
                "tag" : "primitive"
            }
        }
    ],
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type PutResult = { error: string; hash: string; success: boolean; }
export function put(
    node: string,
    path: string,
    config?: {ttl?: number}
): Promise<PutResult>;

export function put(
    peer: FluencePeer,
    node: string,
    path: string,
    config?: {ttl?: number}
): Promise<PutResult>;

export function put(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                           (call %init_peer_id% ("getDataSrv" "node") [] node)
                          )
                          (call %init_peer_id% ("getDataSrv" "path") [] path)
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (xor
                         (call node ("aqua-ipfs" "put") [path] result)
                         (seq
                          (call -relay- ("op" "noop") [])
                          (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                         )
                        )
                       )
                       (call -relay- ("op" "noop") [])
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [result])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "put",
    "returnType" : {
        "tag" : "primitive"
    },
    "argDefs" : [
        {
            "name" : "node",
            "argType" : {
                "tag" : "primitive"
            }
        },
        {
            "name" : "path",
            "argType" : {
                "tag" : "primitive"
            }
        }
    ],
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type Get_external_api_multiaddrResult = { error: string; multiaddr: string; success: boolean; }
export function get_external_api_multiaddr(
    node: string,
    config?: {ttl?: number}
): Promise<Get_external_api_multiaddrResult>;

export function get_external_api_multiaddr(
    peer: FluencePeer,
    node: string,
    config?: {ttl?: number}
): Promise<Get_external_api_multiaddrResult>;

export function get_external_api_multiaddr(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                          (call %init_peer_id% ("getDataSrv" "node") [] node)
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (xor
                         (call node ("aqua-ipfs" "get_external_api_multiaddr") [] result)
                         (seq
                          (call -relay- ("op" "noop") [])
                          (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                         )
                        )
                       )
                       (call -relay- ("op" "noop") [])
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [result])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "get_external_api_multiaddr",
    "returnType" : {
        "tag" : "primitive"
    },
    "argDefs" : [
        {
            "name" : "node",
            "argType" : {
                "tag" : "primitive"
            }
        }
    ],
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

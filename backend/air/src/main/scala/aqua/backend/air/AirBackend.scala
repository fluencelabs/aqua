/*
 * Copyright (C) 2024  Fluence DAO
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package aqua.backend.air

import aqua.backend.{AirFunction, Backend, Generated, Version}
import aqua.definitions.FunctionDef
import aqua.res.AquaRes
import cats.syntax.show.*

object AirBackend extends Backend {

  val ext = ".air"

  override def generate(aqua: AquaRes): Seq[Generated] = {

    val docs = s"""; This file is auto-generated. Do not edit manually: changes may be erased.
                  |; Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
                  |; If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
                  |; Aqua version: ${Version.version}
                  |
                  |""".stripMargin

    aqua.funcs.toList.map { fr =>
      val airStr = FuncAirGen(fr).generate.show
      val funcDef = FunctionDef(fr)
      Generated("." + fr.funcName + ext, docs + airStr, AirFunction(fr.funcName, airStr, funcDef) :: Nil)
    }
  }
}

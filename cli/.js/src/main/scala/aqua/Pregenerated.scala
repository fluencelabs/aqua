package aqua

object Pregenerated {
  def caller(): String = {
    val method = ""
    s"""
       |/**
       | *
       | * This file is auto-generated. Do not edit manually: changes may be erased.
       | * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
       | * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
       | * Aqua version: 0.3.1-SNAPSHOT
       | *
       | */
       |
       |import { Fluence, FluencePeer } from '@fluencelabs/fluence';
       |import {
       |    ResultCodes,
       |    RequestFlow,
       |    RequestFlowBuilder
       |    } from '@fluencelabs/fluence/dist/internal/compilerSupport/v1.js';
       |
       |import pkg from '@fluencelabs/fluence/dist/internal/compilerSupport/v1.js';
       |
       |
       |function missingFields(obj, fields) {
       |    return fields.filter(f => !(f in obj))
       |}
       |
       |// Services
       |
       |// Functions
       |
       |export function callFunc(...args) {
       |    let peer;
       |    let str;
       |    let config;
       |    if (FluencePeer.isInstance(args[0])) {
       |        peer = args[0];
       |        str = args[1];
       |        config = args[2];
       |    } else {
       |        peer = Fluence.getPeer();
       |        str = args[0];
       |        config = args[1];
       |    }
       |
       |    let request;
       |    const promise = new Promise((resolve, reject) => {
       |        const r = new RequestFlowBuilder()
       |                .disableInjections()
       |                .withRawScript(`
       |                    (xor
       |                     (seq
       |                      (seq
       |                       (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
       |                       (call %init_peer_id% ("getDataSrv" "str") [] str)
       |                      )
       |                      (xor
       |                       (call %init_peer_id% ("callbackSrv" "response") [str])
       |                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
       |                      )
       |                     )
       |                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
       |                    )
       |                `,
       |                )
       |                .configHandler((h) => {
       |                    h.on('getDataSrv', '-relay-', () => {
       |                        return peer.getStatus().relayPeerId;
       |                    });
       |                    h.on('getDataSrv', 'str', () => {return str;});
       |                    h.onEvent('callbackSrv', 'response', (args) => {
       |                        const [res] = args;
       |                        resolve(res);
       |                    });
       |                    h.onEvent('errorHandlingSrv', 'error', (args) => {
       |                        const [err] = args;
       |                        reject(err);
       |                    });
       |                })
       |                .handleScriptError(reject)
       |                .handleTimeout(() => {
       |                    reject('Request timed out for callFunc');
       |                })
       |
       |                if (config && config.ttl) {
       |                    r.withTTL(config.ttl)
       |                }
       |
       |                request = r.build();
       |    });
       |    peer.internals.initiateFlow(request);
       |    return promise;
       |}
       |""".stripMargin
  }
}

/* eslint-disable */
// @ts-nocheck
/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.11.5
 *
 */
import type { IFluenceClient as IFluenceClient$$, CallParams as CallParams$$ } from '@fluencelabs/js-client.api';
import {
    v5_callFunction as callFunction$$,
    v5_registerService as registerService$$,
} from '@fluencelabs/js-client.api';
    


// Services

// Functions
export const put_value_script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                         (call %init_peer_id% ("getDataSrv" "initial_peer") [] initial_peer)
                        )
                        (call %init_peer_id% ("getDataSrv" "value") [] value)
                       )
                       (xor
                        (seq
                         (seq
                          (call -relay- ("op" "string_to_b58") [initial_peer] k)
                          (call -relay- ("kad" "neighborhood") [k [] []] nodes)
                         )
                         (par
                          (fold nodes n-0
                           (par
                            (xor
                             (xor
                              (seq
                               (seq
                                (call n-0 ("peer" "timestamp_sec") [] t)
                                (call n-0 ("aqua-dht" "register_key") [initial_peer t false 0])
                               )
                               (call n-0 ("aqua-dht" "put_value") [initial_peer value t [] [] 0])
                              )
                              (call n-0 ("op" "noop") [])
                             )
                             (seq
                              (call -relay- ("op" "noop") [])
                              (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                             )
                            )
                            (next n-0)
                           )
                           (never)
                          )
                          (null)
                         )
                        )
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") ["OK"])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                    )
    `
 

export function put_value(
    initial_peer: string,
    value: string,
    config?: {ttl?: number}
): Promise<string>;

export function put_value(
    peer: IFluenceClient$$,
    initial_peer: string,
    value: string,
    config?: {ttl?: number}
): Promise<string>;

export function put_value(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "put_value",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "initial_peer" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "value" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "string"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        put_value_script
    )
}

export const registerKeyPutValue_script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (seq
                             (seq
                              (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                              (call %init_peer_id% ("getDataSrv" "node_id") [] node_id)
                             )
                             (call %init_peer_id% ("getDataSrv" "key") [] key)
                            )
                            (call %init_peer_id% ("getDataSrv" "value") [] value)
                           )
                           (call %init_peer_id% ("getDataSrv" "relay_id") [] relay_id)
                          )
                          (call %init_peer_id% ("getDataSrv" "service_id") [] service_id)
                         )
                         (call %init_peer_id% ("op" "string_to_b58") [key] k)
                        )
                        (call %init_peer_id% ("kad" "neighborhood") [k [] []] nodes)
                       )
                       (par
                        (fold nodes n-0
                         (par
                          (seq
                           (call -relay- ("op" "noop") [])
                           (xor
                            (call n-0 ("peer" "timestamp_sec") [] t)
                            (seq
                             (call -relay- ("op" "noop") [])
                             (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                            )
                           )
                          )
                          (next n-0)
                         )
                         (never)
                        )
                        (null)
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [nodes])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
 

export function registerKeyPutValue(
    node_id: string,
    key: string,
    value: string,
    relay_id: string | null,
    service_id: string | null,
    config?: {ttl?: number}
): Promise<string[]>;

export function registerKeyPutValue(
    peer: IFluenceClient$$,
    node_id: string,
    key: string,
    value: string,
    relay_id: string | null,
    service_id: string | null,
    config?: {ttl?: number}
): Promise<string[]>;

export function registerKeyPutValue(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "registerKeyPutValue",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "node_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "key" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "value" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "relay_id" : {
                    "tag" : "option",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                },
                "service_id" : {
                    "tag" : "option",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        registerKeyPutValue_script
    )
}

/* eslint-enable */
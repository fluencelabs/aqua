/* eslint-disable */
// @ts-nocheck
/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.11.7
 *
 */
import type { IFluenceClient as IFluenceClient$$, CallParams as CallParams$$ } from '@fluencelabs/js-client.api';
import {
    v5_callFunction as callFunction$$,
    v5_registerService as registerService$$,
} from '@fluencelabs/js-client.api';
    


// Services

export interface LocalSrvDef {
    inside: (callParams: CallParams$$<null>) => void | Promise<void>;
}
export function registerLocalSrv(service: LocalSrvDef): void;
export function registerLocalSrv(serviceId: string, service: LocalSrvDef): void;
export function registerLocalSrv(peer: IFluenceClient$$, service: LocalSrvDef): void;
export function registerLocalSrv(peer: IFluenceClient$$, serviceId: string, service: LocalSrvDef): void;
       

export function registerLocalSrv(...args: any) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "local_srv",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "inside" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "nil"
                },
                "codomain" : {
                    "tag" : "nil"
                }
            }
        }
    }
}
    );
}
      
// Functions
export const closureBig_script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                            (call %init_peer_id% ("getDataSrv" "peer1") [] peer1)
                           )
                           (call %init_peer_id% ("getDataSrv" "peer2") [] peer2)
                          )
                          (par
                           (seq
                            (call -relay- ("op" "noop") [])
                            (xor
                             (seq
                              (call peer1 ("op" "identity") ["co on"] p1Id)
                              (call -relay- ("op" "noop") [])
                             )
                             (seq
                              (call -relay- ("op" "noop") [])
                              (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                             )
                            )
                           )
                           (null)
                          )
                         )
                         (new $p2Id-0
                          (seq
                           (xor
                            (match "in" "in"
                             (xor
                              (seq
                               (call %init_peer_id% ("op" "identity") ["in"] p2)
                               (ap p2 $p2Id-0)
                              )
                              (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                             )
                            )
                            (seq
                             (call %init_peer_id% ("peer" "identify") [] p2Info)
                             (ap p2Info.$.external_addresses.[0] $p2Id-0)
                            )
                           )
                           (new $p2Id-0_test
                            (seq
                             (seq
                              (seq
                               (call %init_peer_id% ("math" "add") [0 1] p2Id-0_incr)
                               (fold $p2Id-0 p2Id-0_fold_var
                                (seq
                                 (seq
                                  (ap p2Id-0_fold_var $p2Id-0_test)
                                  (canon %init_peer_id% $p2Id-0_test  #p2Id-0_iter_canon)
                                 )
                                 (xor
                                  (match #p2Id-0_iter_canon.length p2Id-0_incr
                                   (null)
                                  )
                                  (next p2Id-0_fold_var)
                                 )
                                )
                                (never)
                               )
                              )
                              (canon %init_peer_id% $p2Id-0_test  #p2Id-0_result_canon)
                             )
                             (ap #p2Id-0_result_canon p2Id-0_gate)
                            )
                           )
                          )
                         )
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (new $p2Id
                          (seq
                           (xor
                            (match "on" "in"
                             (xor
                              (seq
                               (call peer2 ("op" "identity") ["on"] p2-0)
                               (ap p2-0 $p2Id)
                              )
                              (seq
                               (seq
                                (call -relay- ("op" "noop") [])
                                (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                               )
                               (call -relay- ("op" "noop") [])
                              )
                             )
                            )
                            (seq
                             (call peer2 ("peer" "identify") [] p2Info-0)
                             (ap p2Info-0.$.external_addresses.[0] $p2Id)
                            )
                           )
                           (new $p2Id_test
                            (seq
                             (seq
                              (seq
                               (call peer2 ("math" "add") [0 1] p2Id_incr)
                               (fold $p2Id p2Id_fold_var
                                (seq
                                 (seq
                                  (ap p2Id_fold_var $p2Id_test)
                                  (canon peer2 $p2Id_test  #p2Id_iter_canon)
                                 )
                                 (xor
                                  (match #p2Id_iter_canon.length p2Id_incr
                                   (null)
                                  )
                                  (next p2Id_fold_var)
                                 )
                                )
                                (never)
                               )
                              )
                              (canon peer2 $p2Id_test  #p2Id_result_canon)
                             )
                             (ap #p2Id_result_canon p2Id_gate)
                            )
                           )
                          )
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [p2Id-0_gate.$.[0] p2Id_gate.$.[0]])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 5])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 6])
                    )
    `
 
export type ClosureBigResult = [string, string]
export function closureBig(
    peer1: string,
    peer2: string,
    config?: {ttl?: number}
): Promise<ClosureBigResult>;

export function closureBig(
    peer: IFluenceClient$$,
    peer1: string,
    peer2: string,
    config?: {ttl?: number}
): Promise<ClosureBigResult>;

export function closureBig(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "closureBig",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "peer1" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "peer2" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "string"
                },
                {
                    "tag" : "scalar",
                    "name" : "string"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        closureBig_script
    )
}

export const lng58Bug_script = `
                    (xor
                     (seq
                      (seq
                       (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                       (new $status
                        (seq
                         (new $avava
                          (seq
                           (ap "frerf" $avava)
                           (ap "ok" $status-0)
                          )
                         )
                         (new $status_test
                          (seq
                           (seq
                            (seq
                             (call %init_peer_id% ("math" "add") [0 1] status_incr)
                             (fold $status status_fold_var
                              (seq
                               (seq
                                (ap status_fold_var $status_test)
                                (canon %init_peer_id% $status_test  #status_iter_canon)
                               )
                               (xor
                                (match #status_iter_canon.length status_incr
                                 (null)
                                )
                                (next status_fold_var)
                               )
                              )
                              (never)
                             )
                            )
                            (canon %init_peer_id% $status_test  #status_result_canon)
                           )
                           (ap #status_result_canon status_gate)
                          )
                         )
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [status_gate.$.[0]])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
 

export function lng58Bug(
    config?: {ttl?: number}
): Promise<string>;

export function lng58Bug(
    peer: IFluenceClient$$,
    config?: {ttl?: number}
): Promise<string>;

export function lng58Bug(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "lng58Bug",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "string"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        lng58Bug_script
    )
}

export const closureIn_script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                          (call %init_peer_id% ("getDataSrv" "peer1") [] peer1)
                         )
                         (par
                          (seq
                           (call -relay- ("op" "noop") [])
                           (xor
                            (seq
                             (call peer1 ("op" "identity") ["co on"] p1Id)
                             (call -relay- ("op" "noop") [])
                            )
                            (seq
                             (call -relay- ("op" "noop") [])
                             (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                            )
                           )
                          )
                          (null)
                         )
                        )
                        (xor
                         (match "in" "in"
                          (xor
                           (call %init_peer_id% ("local_srv" "inside") [])
                           (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                          )
                         )
                         (call %init_peer_id% ("op" "noop") [])
                        )
                       )
                       (call %init_peer_id% ("op" "identity") ["in"] p2Id)
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [p2Id])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                    )
    `
 

export function closureIn(
    peer1: string,
    config?: {ttl?: number}
): Promise<string>;

export function closureIn(
    peer: IFluenceClient$$,
    peer1: string,
    config?: {ttl?: number}
): Promise<string>;

export function closureIn(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "closureIn",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "peer1" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "string"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        closureIn_script
    )
}

export const closureOut2_script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                         (call %init_peer_id% ("getDataSrv" "peer2") [] peer2)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (seq
                          (xor
                           (match "on" "in"
                            (xor
                             (call peer2 ("local_srv" "inside") [])
                             (seq
                              (seq
                               (call -relay- ("op" "noop") [])
                               (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                              )
                              (call -relay- ("op" "noop") [])
                             )
                            )
                           )
                           (call peer2 ("op" "noop") [])
                          )
                          (call peer2 ("peer" "identify") [] p2Id)
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [p2Id])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                    )
    `
 
export type ClosureOut2Result = { air_version: string; external_addresses: string[]; node_version: string; }
export function closureOut2(
    peer2: string,
    config?: {ttl?: number}
): Promise<ClosureOut2Result>;

export function closureOut2(
    peer: IFluenceClient$$,
    peer2: string,
    config?: {ttl?: number}
): Promise<ClosureOut2Result>;

export function closureOut2(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "closureOut2",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "peer2" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "Info",
                    "fields" : {
                        "air_version" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "external_addresses" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        },
                        "node_version" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        closureOut2_script
    )
}

export const closureOut_script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                            (call %init_peer_id% ("getDataSrv" "peer2") [] peer2)
                           )
                           (call -relay- ("op" "noop") [])
                          )
                          (call -relay- ("op" "noop") [])
                         )
                         (xor
                          (match "on" "in"
                           (xor
                            (call peer2 ("local_srv" "inside") [])
                            (seq
                             (seq
                              (call -relay- ("op" "noop") [])
                              (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                             )
                             (call -relay- ("op" "noop") [])
                            )
                           )
                          )
                          (call peer2 ("op" "noop") [])
                         )
                        )
                        (call peer2 ("peer" "identify") [] p2Id)
                       )
                       (call -relay- ("op" "noop") [])
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [p2Id])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
 
export type ClosureOutResult = { air_version: string; external_addresses: string[]; node_version: string; }
export function closureOut(
    peer2: string,
    config?: {ttl?: number}
): Promise<ClosureOutResult>;

export function closureOut(
    peer: IFluenceClient$$,
    peer2: string,
    config?: {ttl?: number}
): Promise<ClosureOutResult>;

export function closureOut(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "closureOut",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "peer2" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "Info",
                    "fields" : {
                        "air_version" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "external_addresses" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        },
                        "node_version" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        closureOut_script
    )
}

/* eslint-enable */
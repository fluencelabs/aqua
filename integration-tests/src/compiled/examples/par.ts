/* eslint-disable */
// @ts-nocheck
/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.11.5
 *
 */
import type { IFluenceClient as IFluenceClient$$, CallParams as CallParams$$ } from '@fluencelabs/js-client.api';
import {
    v5_callFunction as callFunction$$,
    v5_registerService as registerService$$,
} from '@fluencelabs/js-client.api';
    


// Services

export interface ParServiceDef {
    call: (callParams: CallParams$$<null>) => string | Promise<string>;
}
export function registerParService(service: ParServiceDef): void;
export function registerParService(serviceId: string, service: ParServiceDef): void;
export function registerParService(peer: IFluenceClient$$, service: ParServiceDef): void;
export function registerParService(peer: IFluenceClient$$, serviceId: string, service: ParServiceDef): void;
       

export function registerParService(...args: any) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "parservice-id",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "call" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "nil"
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      
// Functions
export const parFunc_script = `
                    (xor
                     (seq
                      (seq
                       (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                       (call %init_peer_id% ("getDataSrv" "node") [] node)
                      )
                      (par
                       (par
                        (call %init_peer_id% ("parservice-id" "call") [] y)
                        (seq
                         (call -relay- ("op" "noop") [])
                         (xor
                          (seq
                           (seq
                            (call node ("peer" "identify") [] t)
                            (call -relay- ("op" "noop") [])
                           )
                           (xor
                            (seq
                             (call %init_peer_id% ("callbackSrv" "c") [t])
                             (call -relay- ("op" "noop") [])
                            )
                            (seq
                             (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                             (call -relay- ("op" "noop") [])
                            )
                           )
                          )
                          (seq
                           (call -relay- ("op" "noop") [])
                           (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                          )
                         )
                        )
                       )
                       (call %init_peer_id% ("parservice-id" "call") [] x)
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
 

export function parFunc(
    node: string,
    c: (arg0: { air_version: string; external_addresses: string[]; node_version: string; }, callParams: CallParams$$<'arg0'>) => void | Promise<void>,
    config?: {ttl?: number}
): Promise<void>;

export function parFunc(
    peer: IFluenceClient$$,
    node: string,
    c: (arg0: { air_version: string; external_addresses: string[]; node_version: string; }, callParams: CallParams$$<'arg0'>) => void | Promise<void>,
    config?: {ttl?: number}
): Promise<void>;

export function parFunc(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "parFunc",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "node" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "c" : {
                    "tag" : "arrow",
                    "domain" : {
                        "tag" : "unlabeledProduct",
                        "items" : [
                            {
                                "tag" : "struct",
                                "name" : "Info",
                                "fields" : {
                                    "air_version" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "external_addresses" : {
                                        "tag" : "array",
                                        "type" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        }
                                    },
                                    "node_version" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    }
                                }
                            }
                        ]
                    },
                    "codomain" : {
                        "tag" : "nil"
                    }
                }
            }
        },
        "codomain" : {
            "tag" : "nil"
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        parFunc_script
    )
}

export const testTimeout_script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "nodes") [] nodes)
                       )
                       (new $status
                        (new $timeout
                         (new $results
                          (seq
                           (seq
                            (seq
                             (seq
                              (call -relay- ("op" "noop") [])
                              (xor
                               (par
                                (fold nodes node-0
                                 (par
                                  (seq
                                   (seq
                                    (xor
                                     (call node-0 ("peer" "identify") [] $results)
                                     (seq
                                      (call -relay- ("op" "noop") [])
                                      (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                                     )
                                    )
                                    (call -relay- ("op" "noop") [])
                                   )
                                   (call %init_peer_id% ("op" "noop") [])
                                  )
                                  (next node-0)
                                 )
                                 (never)
                                )
                                (null)
                               )
                               (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                              )
                             )
                             (par
                              (new $results_test
                               (seq
                                (seq
                                 (seq
                                  (call %init_peer_id% ("math" "add") [999 1] results_incr)
                                  (fold $results results_fold_var
                                   (seq
                                    (seq
                                     (ap results_fold_var $results_test)
                                     (canon %init_peer_id% $results_test  #results_iter_canon)
                                    )
                                    (xor
                                     (match #results_iter_canon.length results_incr
                                      (null)
                                     )
                                     (next results_fold_var)
                                    )
                                   )
                                   (never)
                                  )
                                 )
                                 (canon %init_peer_id% $results_test  #results_result_canon)
                                )
                                (ap #results_result_canon results_gate)
                               )
                              )
                              (call %init_peer_id% ("peer" "timeout") [400 "timeout"] $timeout)
                             )
                            )
                            (xor
                             (seq
                              (canon %init_peer_id% $timeout  #timeout_canon)
                              (match #timeout_canon []
                               (ap "ok" $status)
                              )
                             )
                             (seq
                              (new $timeout_test
                               (seq
                                (seq
                                 (seq
                                  (call %init_peer_id% ("math" "add") [0 1] timeout_incr)
                                  (fold $timeout timeout_fold_var
                                   (seq
                                    (seq
                                     (ap timeout_fold_var $timeout_test)
                                     (canon %init_peer_id% $timeout_test  #timeout_iter_canon)
                                    )
                                    (xor
                                     (match #timeout_iter_canon.length timeout_incr
                                      (null)
                                     )
                                     (next timeout_fold_var)
                                    )
                                   )
                                   (never)
                                  )
                                 )
                                 (canon %init_peer_id% $timeout_test  #timeout_result_canon)
                                )
                                (ap #timeout_result_canon timeout_gate)
                               )
                              )
                              (ap timeout_gate.$.[0] $status)
                             )
                            )
                           )
                           (new $status_test
                            (seq
                             (seq
                              (seq
                               (call %init_peer_id% ("math" "add") [0 1] status_incr)
                               (fold $status status_fold_var
                                (seq
                                 (seq
                                  (ap status_fold_var $status_test)
                                  (canon %init_peer_id% $status_test  #status_iter_canon)
                                 )
                                 (xor
                                  (match #status_iter_canon.length status_incr
                                   (null)
                                  )
                                  (next status_fold_var)
                                 )
                                )
                                (never)
                               )
                              )
                              (canon %init_peer_id% $status_test  #status_result_canon)
                             )
                             (ap #status_result_canon status_gate)
                            )
                           )
                          )
                         )
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [status_gate.$.[0]])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                    )
    `
 

export function testTimeout(
    nodes: string[],
    config?: {ttl?: number}
): Promise<string>;

export function testTimeout(
    peer: IFluenceClient$$,
    nodes: string[],
    config?: {ttl?: number}
): Promise<string>;

export function testTimeout(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "testTimeout",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "nodes" : {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "string"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        testTimeout_script
    )
}

/* eslint-enable */
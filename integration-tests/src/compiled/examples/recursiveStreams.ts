/* eslint-disable */
// @ts-nocheck
/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.11.5
 *
 */
import type { IFluenceClient as IFluenceClient$$, CallParams as CallParams$$ } from '@fluencelabs/js-client.api';
import {
    v5_callFunction as callFunction$$,
    v5_registerService as registerService$$,
} from '@fluencelabs/js-client.api';
    


// Services

export interface YesNoServiceDef {
    get: (callParams: CallParams$$<null>) => string | Promise<string>;
}
export function registerYesNoService(service: YesNoServiceDef): void;
export function registerYesNoService(serviceId: string, service: YesNoServiceDef): void;
export function registerYesNoService(peer: IFluenceClient$$, service: YesNoServiceDef): void;
export function registerYesNoService(peer: IFluenceClient$$, serviceId: string, service: YesNoServiceDef): void;
       

export function registerYesNoService(...args: any) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "yesno",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "get" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "nil"
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      
// Functions
export const recursiveStream_script = `
                    (xor
                     (seq
                      (seq
                       (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                       (new $loop
                        (new $result
                         (seq
                          (seq
                           (seq
                            (seq
                             (seq
                              (seq
                               (ap "yes" $loop)
                               (canon %init_peer_id% $loop  #loop_canon)
                              )
                              (fold #loop_canon l-0
                               (seq
                                (seq
                                 (xor
                                  (match l-0 "yes"
                                   (xor
                                    (call %init_peer_id% ("yesno" "get") [] $loop)
                                    (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                                   )
                                  )
                                  (call %init_peer_id% ("op" "noop") [])
                                 )
                                 (ap "success" $result)
                                )
                                (next l-0)
                               )
                              )
                             )
                             (canon %init_peer_id% $result  #-result-fix-0)
                            )
                            (ap #-result-fix-0 -result-flat-0)
                           )
                           (canon %init_peer_id% $loop  #-loop-fix-1)
                          )
                          (ap #-loop-fix-1 -loop-flat-1)
                         )
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [-result-flat-0 -loop-flat-1])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
 
export type RecursiveStreamResult = [string[], string[]]
export function recursiveStream(
    config?: {ttl?: number}
): Promise<RecursiveStreamResult>;

export function recursiveStream(
    peer: IFluenceClient$$,
    config?: {ttl?: number}
): Promise<RecursiveStreamResult>;

export function recursiveStream(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "recursiveStream",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                },
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        recursiveStream_script
    )
}

/* eslint-enable */
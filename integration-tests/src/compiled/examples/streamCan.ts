/* eslint-disable */
// @ts-nocheck
/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.11.7
 *
 */
import type { IFluenceClient as IFluenceClient$$, CallParams as CallParams$$ } from '@fluencelabs/js-client.api';
import {
    v5_callFunction as callFunction$$,
    v5_registerService as registerService$$,
} from '@fluencelabs/js-client.api';
    


// Services

export interface Op1Def {
    array_length: (array: string[], callParams: CallParams$$<'array'>) => number | Promise<number>;
}
export function registerOp1(service: Op1Def): void;
export function registerOp1(serviceId: string, service: Op1Def): void;
export function registerOp1(peer: IFluenceClient$$, service: Op1Def): void;
export function registerOp1(peer: IFluenceClient$$, serviceId: string, service: Op1Def): void;
       

export function registerOp1(...args: any) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "op",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "array_length" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "array" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "u32"
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      
// Functions
export const accumRes_script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                           (new $str
                            (seq
                             (seq
                              (ap "a" $str)
                              (canon %init_peer_id% $str  #-str-fix-0)
                             )
                             (ap #-str-fix-0 -str-flat-0)
                            )
                           )
                          )
                          (ap -str-flat-0 $res_accum)
                         )
                         (new $str-0
                          (seq
                           (seq
                            (ap "b" $str-0)
                            (canon %init_peer_id% $str-0  #-str-fix-0-0)
                           )
                           (ap #-str-fix-0-0 -str-flat-0-0)
                          )
                         )
                        )
                        (ap -str-flat-0-0 $res_accum)
                       )
                       (ap [] $res_accum)
                      )
                      (xor
                       (seq
                        (canon %init_peer_id% $res_accum  #res_accum_canon)
                        (call %init_peer_id% ("callbackSrv" "response") [#res_accum_canon])
                       )
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
 

export function accumRes(
    config?: {ttl?: number}
): Promise<string | null[]>;

export function accumRes(
    peer: IFluenceClient$$,
    config?: {ttl?: number}
): Promise<string | null[]>;

export function accumRes(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "accumRes",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "option",
                        "type" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        accumRes_script
    )
}

export const toOpt_script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "s") [] s)
                       )
                       (new $str
                        (seq
                         (seq
                          (ap s $str)
                          (canon %init_peer_id% $str  #-str-fix-0)
                         )
                         (ap #-str-fix-0 -str-flat-0)
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [-str-flat-0])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
 

export function toOpt(
    s: string,
    config?: {ttl?: number}
): Promise<string | null>;

export function toOpt(
    peer: IFluenceClient$$,
    s: string,
    config?: {ttl?: number}
): Promise<string | null>;

export function toOpt(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "toOpt",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "s" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "option",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        toOpt_script
    )
}

export const returnCanStream_script = `
                    (xor
                     (seq
                      (seq
                       (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                       (new $status
                        (seq
                         (ap "ok" $status)
                         (new $status_test
                          (seq
                           (seq
                            (seq
                             (call %init_peer_id% ("math" "add") [0 1] status_incr)
                             (fold $status status_fold_var
                              (seq
                               (seq
                                (ap status_fold_var $status_test)
                                (canon %init_peer_id% $status_test  #status_iter_canon)
                               )
                               (xor
                                (match #status_iter_canon.length status_incr
                                 (null)
                                )
                                (next status_fold_var)
                               )
                              )
                              (never)
                             )
                            )
                            (canon %init_peer_id% $status_test  #status_result_canon)
                           )
                           (ap #status_result_canon status_gate)
                          )
                         )
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [status_gate.$.[0]])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
 

export function returnCanStream(
    config?: {ttl?: number}
): Promise<string>;

export function returnCanStream(
    peer: IFluenceClient$$,
    config?: {ttl?: number}
): Promise<string>;

export function returnCanStream(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "returnCanStream",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "string"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        returnCanStream_script
    )
}

export const bugLNG63_2_script = `
                    (xor
                     (seq
                      (seq
                       (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                       (new $status
                        (seq
                         (seq
                          (seq
                           (seq
                            (seq
                             (ap "ok" $status)
                             (new $status_test
                              (seq
                               (seq
                                (seq
                                 (call %init_peer_id% ("math" "add") [0 1] status_incr)
                                 (fold $status status_fold_var
                                  (seq
                                   (seq
                                    (ap status_fold_var $status_test)
                                    (canon %init_peer_id% $status_test  #status_iter_canon)
                                   )
                                   (xor
                                    (match #status_iter_canon.length status_incr
                                     (null)
                                    )
                                    (next status_fold_var)
                                   )
                                  )
                                  (never)
                                 )
                                )
                                (canon %init_peer_id% $status_test  #status_result_canon)
                               )
                               (ap #status_result_canon status_gate)
                              )
                             )
                            )
                            (canon %init_peer_id% $status  #-status-fix-0)
                           )
                           (ap #-status-fix-0 -status-flat-0)
                          )
                          (new $array-inline
                           (seq
                            (seq
                             (seq
                              (new $status_test-0
                               (seq
                                (seq
                                 (seq
                                  (call %init_peer_id% ("math" "add") [0 1] status_incr-0)
                                  (fold $status status_fold_var-0
                                   (seq
                                    (seq
                                     (ap status_fold_var-0 $status_test-0)
                                     (canon %init_peer_id% $status_test-0  #status_iter_canon-0)
                                    )
                                    (xor
                                     (match #status_iter_canon-0.length status_incr-0
                                      (null)
                                     )
                                     (next status_fold_var-0)
                                    )
                                   )
                                   (never)
                                  )
                                 )
                                 (canon %init_peer_id% $status_test-0  #status_result_canon-0)
                                )
                                (ap #status_result_canon-0 status_gate-0)
                               )
                              )
                              (ap status_gate-0.$.[0] $array-inline)
                             )
                             (ap status_gate.$.[0] $array-inline)
                            )
                            (canon %init_peer_id% $array-inline  #array-inline-0)
                           )
                          )
                         )
                         (new $array-inline-1
                          (seq
                           (seq
                            (seq
                             (seq
                              (seq
                               (new $status_test-1
                                (seq
                                 (seq
                                  (seq
                                   (call %init_peer_id% ("math" "add") [0 1] status_incr-1)
                                   (fold $status status_fold_var-1
                                    (seq
                                     (seq
                                      (ap status_fold_var-1 $status_test-1)
                                      (canon %init_peer_id% $status_test-1  #status_iter_canon-1)
                                     )
                                     (xor
                                      (match #status_iter_canon-1.length status_incr-1
                                       (null)
                                      )
                                      (next status_fold_var-1)
                                     )
                                    )
                                    (never)
                                   )
                                  )
                                  (canon %init_peer_id% $status_test-1  #status_result_canon-1)
                                 )
                                 (ap #status_result_canon-1 status_gate-1)
                                )
                               )
                               (new $status_test-2
                                (seq
                                 (seq
                                  (seq
                                   (call %init_peer_id% ("math" "add") [0 1] status_incr-2)
                                   (fold $status status_fold_var-2
                                    (seq
                                     (seq
                                      (ap status_fold_var-2 $status_test-2)
                                      (canon %init_peer_id% $status_test-2  #status_iter_canon-2)
                                     )
                                     (xor
                                      (match #status_iter_canon-2.length status_incr-2
                                       (null)
                                      )
                                      (next status_fold_var-2)
                                     )
                                    )
                                    (never)
                                   )
                                  )
                                  (canon %init_peer_id% $status_test-2  #status_result_canon-2)
                                 )
                                 (ap #status_result_canon-2 status_gate-2)
                                )
                               )
                              )
                              (ap status_gate-1.$.[0] $array-inline-1)
                             )
                             (ap "no" $array-inline-1)
                            )
                            (ap status_gate-2.$.[0] $array-inline-1)
                           )
                           (canon %init_peer_id% $array-inline-1  #array-inline-1-0)
                          )
                         )
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [status_gate.$.[0] -status-flat-0 #array-inline-1-0])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
 
export type BugLNG63_2Result = [string, string[], string[]]
export function bugLNG63_2(
    config?: {ttl?: number}
): Promise<BugLNG63_2Result>;

export function bugLNG63_2(
    peer: IFluenceClient$$,
    config?: {ttl?: number}
): Promise<BugLNG63_2Result>;

export function bugLNG63_2(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "bugLNG63_2",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "string"
                },
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                },
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        bugLNG63_2_script
    )
}

export const bugLNG63_script = `
                    (xor
                     (seq
                      (seq
                       (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                       (new $status
                        (seq
                         (ap "ok" $status)
                         (new $status_test
                          (seq
                           (seq
                            (seq
                             (call %init_peer_id% ("math" "add") [0 1] status_incr)
                             (fold $status status_fold_var
                              (seq
                               (seq
                                (ap status_fold_var $status_test)
                                (canon %init_peer_id% $status_test  #status_iter_canon)
                               )
                               (xor
                                (match #status_iter_canon.length status_incr
                                 (null)
                                )
                                (next status_fold_var)
                               )
                              )
                              (never)
                             )
                            )
                            (canon %init_peer_id% $status_test  #status_result_canon)
                           )
                           (ap #status_result_canon status_gate)
                          )
                         )
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [status_gate.$.[0]])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
 

export function bugLNG63(
    config?: {ttl?: number}
): Promise<string>;

export function bugLNG63(
    peer: IFluenceClient$$,
    config?: {ttl?: number}
): Promise<string>;

export function bugLNG63(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "bugLNG63",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "string"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        bugLNG63_script
    )
}

export const returnMultipleStreamResults_script = `
                    (xor
                     (seq
                      (seq
                       (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                       (new $status
                        (seq
                         (seq
                          (seq
                           (seq
                            (seq
                             (ap "ok" $status)
                             (new $status_test
                              (seq
                               (seq
                                (seq
                                 (call %init_peer_id% ("math" "add") [0 1] status_incr)
                                 (fold $status status_fold_var
                                  (seq
                                   (seq
                                    (ap status_fold_var $status_test)
                                    (canon %init_peer_id% $status_test  #status_iter_canon)
                                   )
                                   (xor
                                    (match #status_iter_canon.length status_incr
                                     (null)
                                    )
                                    (next status_fold_var)
                                   )
                                  )
                                  (never)
                                 )
                                )
                                (canon %init_peer_id% $status_test  #status_result_canon)
                               )
                               (ap #status_result_canon status_gate)
                              )
                             )
                            )
                            (canon %init_peer_id% $status  #-status-fix-0)
                           )
                           (ap #-status-fix-0 -status-flat-0)
                          )
                          (new $array-inline
                           (seq
                            (seq
                             (seq
                              (new $status_test-0
                               (seq
                                (seq
                                 (seq
                                  (call %init_peer_id% ("math" "add") [0 1] status_incr-0)
                                  (fold $status status_fold_var-0
                                   (seq
                                    (seq
                                     (ap status_fold_var-0 $status_test-0)
                                     (canon %init_peer_id% $status_test-0  #status_iter_canon-0)
                                    )
                                    (xor
                                     (match #status_iter_canon-0.length status_incr-0
                                      (null)
                                     )
                                     (next status_fold_var-0)
                                    )
                                   )
                                   (never)
                                  )
                                 )
                                 (canon %init_peer_id% $status_test-0  #status_result_canon-0)
                                )
                                (ap #status_result_canon-0 status_gate-0)
                               )
                              )
                              (ap status_gate-0.$.[0] $array-inline)
                             )
                             (ap status_gate.$.[0] $array-inline)
                            )
                            (canon %init_peer_id% $array-inline  #array-inline-0)
                           )
                          )
                         )
                         (new $array-inline-1
                          (seq
                           (seq
                            (seq
                             (seq
                              (seq
                               (new $status_test-1
                                (seq
                                 (seq
                                  (seq
                                   (call %init_peer_id% ("math" "add") [0 1] status_incr-1)
                                   (fold $status status_fold_var-1
                                    (seq
                                     (seq
                                      (ap status_fold_var-1 $status_test-1)
                                      (canon %init_peer_id% $status_test-1  #status_iter_canon-1)
                                     )
                                     (xor
                                      (match #status_iter_canon-1.length status_incr-1
                                       (null)
                                      )
                                      (next status_fold_var-1)
                                     )
                                    )
                                    (never)
                                   )
                                  )
                                  (canon %init_peer_id% $status_test-1  #status_result_canon-1)
                                 )
                                 (ap #status_result_canon-1 status_gate-1)
                                )
                               )
                               (new $status_test-2
                                (seq
                                 (seq
                                  (seq
                                   (call %init_peer_id% ("math" "add") [0 1] status_incr-2)
                                   (fold $status status_fold_var-2
                                    (seq
                                     (seq
                                      (ap status_fold_var-2 $status_test-2)
                                      (canon %init_peer_id% $status_test-2  #status_iter_canon-2)
                                     )
                                     (xor
                                      (match #status_iter_canon-2.length status_incr-2
                                       (null)
                                      )
                                      (next status_fold_var-2)
                                     )
                                    )
                                    (never)
                                   )
                                  )
                                  (canon %init_peer_id% $status_test-2  #status_result_canon-2)
                                 )
                                 (ap #status_result_canon-2 status_gate-2)
                                )
                               )
                              )
                              (ap status_gate-1.$.[0] $array-inline-1)
                             )
                             (ap "no" $array-inline-1)
                            )
                            (ap status_gate-2.$.[0] $array-inline-1)
                           )
                           (canon %init_peer_id% $array-inline-1  #array-inline-1-0)
                          )
                         )
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [status_gate.$.[0] -status-flat-0 #array-inline-0 #array-inline-1-0])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
 
export type ReturnMultipleStreamResultsResult = [string, string[], string[], string[]]
export function returnMultipleStreamResults(
    config?: {ttl?: number}
): Promise<ReturnMultipleStreamResultsResult>;

export function returnMultipleStreamResults(
    peer: IFluenceClient$$,
    config?: {ttl?: number}
): Promise<ReturnMultipleStreamResultsResult>;

export function returnMultipleStreamResults(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "returnMultipleStreamResults",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "string"
                },
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                },
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                },
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        returnMultipleStreamResults_script
    )
}

export const bugLNG63_3_script = `
                    (xor
                     (seq
                      (seq
                       (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                       (new $num
                        (new $status
                         (seq
                          (seq
                           (seq
                            (seq
                             (seq
                              (seq
                               (seq
                                (ap "ok" $status)
                                (new $status_test
                                 (seq
                                  (seq
                                   (seq
                                    (call %init_peer_id% ("math" "add") [0 1] status_incr)
                                    (fold $status status_fold_var
                                     (seq
                                      (seq
                                       (ap status_fold_var $status_test)
                                       (canon %init_peer_id% $status_test  #status_iter_canon)
                                      )
                                      (xor
                                       (match #status_iter_canon.length status_incr
                                        (null)
                                       )
                                       (next status_fold_var)
                                      )
                                     )
                                     (never)
                                    )
                                   )
                                   (canon %init_peer_id% $status_test  #status_result_canon)
                                  )
                                  (ap #status_result_canon status_gate)
                                 )
                                )
                               )
                               (ap 2 $num)
                              )
                              (new $array-inline
                               (seq
                                (seq
                                 (seq
                                  (seq
                                   (seq
                                    (canon %init_peer_id% $status  #status_canon)
                                    (call %init_peer_id% ("op" "array_length") [#status_canon] array_length)
                                   )
                                   (new $num_test
                                    (seq
                                     (seq
                                      (seq
                                       (call %init_peer_id% ("math" "add") [0 1] num_incr)
                                       (fold $num num_fold_var
                                        (seq
                                         (seq
                                          (ap num_fold_var $num_test)
                                          (canon %init_peer_id% $num_test  #num_iter_canon)
                                         )
                                         (xor
                                          (match #num_iter_canon.length num_incr
                                           (null)
                                          )
                                          (next num_fold_var)
                                         )
                                        )
                                        (never)
                                       )
                                      )
                                      (canon %init_peer_id% $num_test  #num_result_canon)
                                     )
                                     (ap #num_result_canon num_gate)
                                    )
                                   )
                                  )
                                  (ap array_length $array-inline)
                                 )
                                 (ap num_gate.$.[0] $array-inline)
                                )
                                (canon %init_peer_id% $array-inline  #array-inline-0)
                               )
                              )
                             )
                             (new $status_test-0
                              (seq
                               (seq
                                (seq
                                 (call %init_peer_id% ("math" "add") [0 1] status_incr-0)
                                 (fold $status status_fold_var-0
                                  (seq
                                   (seq
                                    (ap status_fold_var-0 $status_test-0)
                                    (canon %init_peer_id% $status_test-0  #status_iter_canon-0)
                                   )
                                   (xor
                                    (match #status_iter_canon-0.length status_incr-0
                                     (null)
                                    )
                                    (next status_fold_var-0)
                                   )
                                  )
                                  (never)
                                 )
                                )
                                (canon %init_peer_id% $status_test-0  #status_result_canon-0)
                               )
                               (ap #status_result_canon-0 status_gate-0)
                              )
                             )
                            )
                            (canon %init_peer_id% $status  #status_canon-0)
                           )
                           (call %init_peer_id% ("op" "array_length") [#status_canon-0] array_length-0)
                          )
                          (new $array-inline-1
                           (seq
                            (seq
                             (seq
                              (seq
                               (seq
                                (seq
                                 (canon %init_peer_id% $status  #status_canon-1)
                                 (call %init_peer_id% ("op" "array_length") [#status_canon-1] array_length-1)
                                )
                                (new $num_test-0
                                 (seq
                                  (seq
                                   (seq
                                    (call %init_peer_id% ("math" "add") [0 1] num_incr-0)
                                    (fold $num num_fold_var-0
                                     (seq
                                      (seq
                                       (ap num_fold_var-0 $num_test-0)
                                       (canon %init_peer_id% $num_test-0  #num_iter_canon-0)
                                      )
                                      (xor
                                       (match #num_iter_canon-0.length num_incr-0
                                        (null)
                                       )
                                       (next num_fold_var-0)
                                      )
                                     )
                                     (never)
                                    )
                                   )
                                   (canon %init_peer_id% $num_test-0  #num_result_canon-0)
                                  )
                                  (ap #num_result_canon-0 num_gate-0)
                                 )
                                )
                               )
                               (ap array_length-1 $array-inline-1)
                              )
                              (ap 3 $array-inline-1)
                             )
                             (ap num_gate-0.$.[0] $array-inline-1)
                            )
                            (canon %init_peer_id% $array-inline-1  #array-inline-1-0)
                           )
                          )
                         )
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [status_gate-0.$.[0] array_length-0 #array-inline-1-0])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
 
export type BugLNG63_3Result = [string, number, number[]]
export function bugLNG63_3(
    config?: {ttl?: number}
): Promise<BugLNG63_3Result>;

export function bugLNG63_3(
    peer: IFluenceClient$$,
    config?: {ttl?: number}
): Promise<BugLNG63_3Result>;

export function bugLNG63_3(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "bugLNG63_3",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "string"
                },
                {
                    "tag" : "scalar",
                    "name" : "u32"
                },
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "u32"
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        bugLNG63_3_script
    )
}

/* eslint-enable */
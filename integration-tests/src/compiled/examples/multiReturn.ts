/* eslint-disable */
// @ts-nocheck
/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.11.5
 *
 */
import type { IFluenceClient as IFluenceClient$$, CallParams as CallParams$$ } from '@fluencelabs/js-client.api';
import {
    v5_callFunction as callFunction$$,
    v5_registerService as registerService$$,
} from '@fluencelabs/js-client.api';
    


// Services

export interface GetStrDef {
    retStr: (arg0: string, callParams: CallParams$$<'arg0'>) => string | Promise<string>;
}
export function registerGetStr(service: GetStrDef): void;
export function registerGetStr(serviceId: string, service: GetStrDef): void;
export function registerGetStr(peer: IFluenceClient$$, service: GetStrDef): void;
export function registerGetStr(peer: IFluenceClient$$, serviceId: string, service: GetStrDef): void;
       

export function registerGetStr(...args: any) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "multiret-test",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "retStr" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    ]
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      


export interface GetNumDef {
    retNum: (callParams: CallParams$$<null>) => number | Promise<number>;
}
export function registerGetNum(service: GetNumDef): void;
export function registerGetNum(serviceId: string, service: GetNumDef): void;
export function registerGetNum(peer: IFluenceClient$$, service: GetNumDef): void;
export function registerGetNum(peer: IFluenceClient$$, serviceId: string, service: GetNumDef): void;
       

export function registerGetNum(...args: any) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "multiret-num",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "retNum" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "nil"
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "u8"
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      
// Functions
export const multiReturnFunc_script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                         (call %init_peer_id% ("getDataSrv" "somethingToReturn") [] somethingToReturn)
                        )
                        (call %init_peer_id% ("getDataSrv" "smthOption") [] smthOption)
                       )
                       (new $res
                        (seq
                         (seq
                          (seq
                           (seq
                            (seq
                             (seq
                              (call %init_peer_id% ("multiret-test" "retStr") ["some-str"] $res)
                              (call %init_peer_id% ("multiret-test" "retStr") ["random-str"] $res)
                             )
                             (call %init_peer_id% ("multiret-test" "retStr") ["some-str"] str)
                            )
                            (call %init_peer_id% ("multiret-num" "retNum") [] n)
                           )
                           (ap str $res)
                          )
                          (canon %init_peer_id% $res  #-res-fix-0)
                         )
                         (ap #-res-fix-0 -res-flat-0)
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [-res-flat-0 5 "some-str" somethingToReturn smthOption n])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
 
export type MultiReturnFuncResult = [string[], number, string, number[], string | null, number]
export function multiReturnFunc(
    somethingToReturn: number[],
    smthOption: string | null,
    config?: {ttl?: number}
): Promise<MultiReturnFuncResult>;

export function multiReturnFunc(
    peer: IFluenceClient$$,
    somethingToReturn: number[],
    smthOption: string | null,
    config?: {ttl?: number}
): Promise<MultiReturnFuncResult>;

export function multiReturnFunc(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "multiReturnFunc",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "somethingToReturn" : {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "u8"
                    }
                },
                "smthOption" : {
                    "tag" : "option",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                },
                {
                    "tag" : "scalar",
                    "name" : "u8"
                },
                {
                    "tag" : "scalar",
                    "name" : "string"
                },
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "u8"
                    }
                },
                {
                    "tag" : "option",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                },
                {
                    "tag" : "scalar",
                    "name" : "u8"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        multiReturnFunc_script
    )
}

export const tupleFunc_script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("multiret-test" "retStr") ["some-str"] str)
                       )
                       (call %init_peer_id% ("multiret-num" "retNum") [] n)
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [str n])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
 
export type TupleFuncResult = [string, number]
export function tupleFunc(
    config?: {ttl?: number}
): Promise<TupleFuncResult>;

export function tupleFunc(
    peer: IFluenceClient$$,
    config?: {ttl?: number}
): Promise<TupleFuncResult>;

export function tupleFunc(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "tupleFunc",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "string"
                },
                {
                    "tag" : "scalar",
                    "name" : "u8"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        tupleFunc_script
    )
}

/* eslint-enable */
/* eslint-disable */
// @ts-nocheck
/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.11.7
 *
 */
import type { IFluenceClient as IFluenceClient$$, CallParams as CallParams$$ } from '@fluencelabs/js-client.api';
import {
    v5_callFunction as callFunction$$,
    v5_registerService as registerService$$,
} from '@fluencelabs/js-client.api';
    


// Services

export interface SerDef {
    getRecord: (callParams: CallParams$$<null>) => { peer_id: string; relay_id: string[]; } | Promise<{ peer_id: string; relay_id: string[]; }>;
}
export function registerSer(service: SerDef): void;
export function registerSer(serviceId: string, service: SerDef): void;
export function registerSer(peer: IFluenceClient$$, service: SerDef): void;
export function registerSer(peer: IFluenceClient$$, serviceId: string, service: SerDef): void;
       

export function registerSer(...args: any) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "ser",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "getRecord" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "nil"
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "struct",
                            "name" : "Record",
                            "fields" : {
                                "peer_id" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "relay_id" : {
                                    "tag" : "array",
                                    "type" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    }
                                }
                            }
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      
// Functions
export const bugLng79_script = `
                    (xor
                     (seq
                      (seq
                       (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                       (new $stream
                        (seq
                         (seq
                          (seq
                           (seq
                            (call %init_peer_id% ("ser" "getRecord") [] $stream)
                            (new $stream_test
                             (seq
                              (seq
                               (seq
                                (call %init_peer_id% ("math" "add") [0 1] stream_incr)
                                (fold $stream stream_fold_var
                                 (seq
                                  (seq
                                   (ap stream_fold_var $stream_test)
                                   (canon %init_peer_id% $stream_test  #stream_iter_canon)
                                  )
                                  (xor
                                   (match #stream_iter_canon.length stream_incr
                                    (null)
                                   )
                                   (next stream_fold_var)
                                  )
                                 )
                                 (never)
                                )
                               )
                               (canon %init_peer_id% $stream_test  #stream_result_canon)
                              )
                              (ap #stream_result_canon stream_gate)
                             )
                            )
                           )
                           (call -relay- ("op" "noop") [])
                          )
                          (fold stream_gate.$.[0].relay_id -via-peer-
                           (seq
                            (call -via-peer- ("op" "noop") [])
                            (next -via-peer-)
                           )
                          )
                         )
                         (xor
                          (seq
                           (seq
                            (call stream_gate.$.[0].peer_id ("math" "add") [1 1] add)
                            (fold stream_gate.$.[0].relay_id -via-peer-
                             (seq
                              (next -via-peer-)
                              (call -via-peer- ("op" "noop") [])
                             )
                            )
                           )
                           (call -relay- ("op" "noop") [])
                          )
                          (seq
                           (seq
                            (fold stream_gate.$.[0].relay_id -via-peer-
                             (seq
                              (call -via-peer- ("op" "noop") [])
                              (next -via-peer-)
                             )
                            )
                            (call -relay- ("op" "noop") [])
                           )
                           (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                          )
                         )
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [add])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
 

export function bugLng79(
    log: (arg0: string, callParams: CallParams$$<'arg0'>) => void | Promise<void>,
    config?: {ttl?: number}
): Promise<number>;

export function bugLng79(
    peer: IFluenceClient$$,
    log: (arg0: string, callParams: CallParams$$<'arg0'>) => void | Promise<void>,
    config?: {ttl?: number}
): Promise<number>;

export function bugLng79(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "bugLng79",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "log" : {
                    "tag" : "arrow",
                    "domain" : {
                        "tag" : "unlabeledProduct",
                        "items" : [
                            {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        ]
                    },
                    "codomain" : {
                        "tag" : "nil"
                    }
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "u32"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        bugLng79_script
    )
}

/* eslint-enable */
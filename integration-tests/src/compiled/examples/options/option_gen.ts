/* eslint-disable */
// @ts-nocheck
/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.11.5
 *
 */
import type { IFluenceClient as IFluenceClient$$, CallParams as CallParams$$ } from '@fluencelabs/js-client.api';
import {
    v5_callFunction as callFunction$$,
    v5_registerService as registerService$$,
} from '@fluencelabs/js-client.api';
    


// Services

export interface OptionStringDef {
    checkOption: (str: string | null, callParams: CallParams$$<'str'>) => string | Promise<string>;
}
export function registerOptionString(service: OptionStringDef): void;
export function registerOptionString(serviceId: string, service: OptionStringDef): void;
export function registerOptionString(peer: IFluenceClient$$, service: OptionStringDef): void;
export function registerOptionString(peer: IFluenceClient$$, serviceId: string, service: OptionStringDef): void;
       

export function registerOptionString(...args: any) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "opt_str",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "checkOption" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "str" : {
                            "tag" : "option",
                            "type" : {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      
// Functions
export const checkEmpty_script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (new $valueEmpty
                         (seq
                          (canon %init_peer_id% $valueEmpty  #-valueEmpty-fix-0)
                          (ap #-valueEmpty-fix-0 -valueEmpty-flat-0)
                         )
                        )
                       )
                       (call %init_peer_id% ("opt_str" "checkOption") [-valueEmpty-flat-0] res)
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
 

export function checkEmpty(
    config?: {ttl?: number}
): Promise<string>;

export function checkEmpty(
    peer: IFluenceClient$$,
    config?: {ttl?: number}
): Promise<string>;

export function checkEmpty(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "checkEmpty",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "string"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        checkEmpty_script
    )
}

export const emptyString_script = `
                    (xor
                     (seq
                      (seq
                       (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                       (new $valueEmpty
                        (seq
                         (canon %init_peer_id% $valueEmpty  #-valueEmpty-fix-0)
                         (ap #-valueEmpty-fix-0 -valueEmpty-flat-0)
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [-valueEmpty-flat-0])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
 

export function emptyString(
    config?: {ttl?: number}
): Promise<string | null>;

export function emptyString(
    peer: IFluenceClient$$,
    config?: {ttl?: number}
): Promise<string | null>;

export function emptyString(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "emptyString",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "option",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        emptyString_script
    )
}

export const checkNoneEmpty_script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                         (call %init_peer_id% ("getDataSrv" "str") [] str)
                        )
                        (new $valueEmpty
                         (seq
                          (seq
                           (ap str $valueEmpty)
                           (canon %init_peer_id% $valueEmpty  #-valueEmpty-fix-0)
                          )
                          (ap #-valueEmpty-fix-0 -valueEmpty-flat-0)
                         )
                        )
                       )
                       (call %init_peer_id% ("opt_str" "checkOption") [-valueEmpty-flat-0] res)
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
 

export function checkNoneEmpty(
    str: string,
    config?: {ttl?: number}
): Promise<string>;

export function checkNoneEmpty(
    peer: IFluenceClient$$,
    str: string,
    config?: {ttl?: number}
): Promise<string>;

export function checkNoneEmpty(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "checkNoneEmpty",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "str" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "string"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        checkNoneEmpty_script
    )
}

export const stringAsOption_script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "str") [] str)
                       )
                       (new $valueEmpty
                        (seq
                         (seq
                          (ap str $valueEmpty)
                          (canon %init_peer_id% $valueEmpty  #-valueEmpty-fix-0)
                         )
                         (ap #-valueEmpty-fix-0 -valueEmpty-flat-0)
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [-valueEmpty-flat-0])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
 

export function stringAsOption(
    str: string,
    config?: {ttl?: number}
): Promise<string | null>;

export function stringAsOption(
    peer: IFluenceClient$$,
    str: string,
    config?: {ttl?: number}
): Promise<string | null>;

export function stringAsOption(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "stringAsOption",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "str" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "option",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        stringAsOption_script
    )
}

/* eslint-enable */
/* eslint-disable */
// @ts-nocheck
/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.11.5
 *
 */
import type { IFluenceClient as IFluenceClient$$, CallParams as CallParams$$ } from '@fluencelabs/js-client.api';
import {
    v5_callFunction as callFunction$$,
    v5_registerService as registerService$$,
} from '@fluencelabs/js-client.api';
    


// Services

export interface OpRDef {
    identity: (s: string, callParams: CallParams$$<'s'>) => string | Promise<string>;
}
export function registerOpR(service: OpRDef): void;
export function registerOpR(serviceId: string, service: OpRDef): void;
export function registerOpR(peer: IFluenceClient$$, service: OpRDef): void;
export function registerOpR(peer: IFluenceClient$$, serviceId: string, service: OpRDef): void;
       

export function registerOpR(...args: any) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "op",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "identity" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "s" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      
// Functions
export const ifCorrectXorWrap_script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "node") [] node)
                       )
                       (new $service_id
                        (seq
                         (seq
                          (call -relay- ("op" "noop") [])
                          (xor
                           (seq
                            (call node ("op" "identity") ["1234"] res)
                            (xor
                             (seq
                              (match res ""
                               (ap "0x" $service_id)
                              )
                              (call -relay- ("op" "noop") [])
                             )
                             (seq
                              (ap "1x" $service_id)
                              (call -relay- ("op" "noop") [])
                             )
                            )
                           )
                           (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                          )
                         )
                         (new $service_id_test
                          (seq
                           (seq
                            (seq
                             (call %init_peer_id% ("math" "add") [0 1] service_id_incr)
                             (fold $service_id service_id_fold_var
                              (seq
                               (seq
                                (ap service_id_fold_var $service_id_test)
                                (canon %init_peer_id% $service_id_test  #service_id_iter_canon)
                               )
                               (xor
                                (match #service_id_iter_canon.length service_id_incr
                                 (null)
                                )
                                (next service_id_fold_var)
                               )
                              )
                              (never)
                             )
                            )
                            (canon %init_peer_id% $service_id_test  #service_id_result_canon)
                           )
                           (ap #service_id_result_canon service_id_gate)
                          )
                         )
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [service_id_gate.$.[0]])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
 

export function ifCorrectXorWrap(
    node: string,
    config?: {ttl?: number}
): Promise<string>;

export function ifCorrectXorWrap(
    peer: IFluenceClient$$,
    node: string,
    config?: {ttl?: number}
): Promise<string>;

export function ifCorrectXorWrap(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "ifCorrectXorWrap",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "node" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "string"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        ifCorrectXorWrap_script
    )
}

export const ifElseNumCall_script = `
                    (xor
                     (seq
                      (seq
                       (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                       (call %init_peer_id% ("getDataSrv" "condition") [] condition)
                      )
                      (xor
                       (match condition 1
                        (xor
                         (call %init_peer_id% ("println-service-id" "print") ["it is 1"])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                       (call %init_peer_id% ("println-service-id" "print") ["it is not 1"])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
 

export function ifElseNumCall(
    condition: number,
    config?: {ttl?: number}
): Promise<void>;

export function ifElseNumCall(
    peer: IFluenceClient$$,
    condition: number,
    config?: {ttl?: number}
): Promise<void>;

export function ifElseNumCall(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "ifElseNumCall",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "condition" : {
                    "tag" : "scalar",
                    "name" : "u32"
                }
            }
        },
        "codomain" : {
            "tag" : "nil"
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        ifElseNumCall_script
    )
}

export const ifElseCall_script = `
                    (xor
                     (seq
                      (seq
                       (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                       (call %init_peer_id% ("getDataSrv" "condition") [] condition)
                      )
                      (xor
                       (match condition true
                        (xor
                         (call %init_peer_id% ("println-service-id" "print") ["it is true"])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                       (call %init_peer_id% ("println-service-id" "print") ["it is false"])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
 

export function ifElseCall(
    condition: boolean,
    config?: {ttl?: number}
): Promise<void>;

export function ifElseCall(
    peer: IFluenceClient$$,
    condition: boolean,
    config?: {ttl?: number}
): Promise<void>;

export function ifElseCall(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "ifElseCall",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "condition" : {
                    "tag" : "scalar",
                    "name" : "bool"
                }
            }
        },
        "codomain" : {
            "tag" : "nil"
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        ifElseCall_script
    )
}

export const bugLNG69_script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                         (call %init_peer_id% ("getDataSrv" "other_node") [] other_node)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call other_node ("op" "noop") [])
                         (xor
                          (match false true
                           (xor
                            (seq
                             (call other_node ("op" "noop") [])
                             (call -relay- ("op" "noop") [])
                            )
                            (seq
                             (call -relay- ("op" "noop") [])
                             (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                            )
                           )
                          )
                          (seq
                           (seq
                            (call -relay- ("op" "noop") [])
                            (call other_node ("op" "noop") [])
                           )
                           (call -relay- ("op" "noop") [])
                          )
                         )
                        )
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [true])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                    )
    `
 

export function bugLNG69(
    other_node: string,
    config?: {ttl?: number}
): Promise<boolean>;

export function bugLNG69(
    peer: IFluenceClient$$,
    other_node: string,
    config?: {ttl?: number}
): Promise<boolean>;

export function bugLNG69(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "bugLNG69",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "other_node" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "bool"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        bugLNG69_script
    )
}

/* eslint-enable */
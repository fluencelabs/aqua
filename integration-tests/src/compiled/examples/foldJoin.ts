/* eslint-disable */
// @ts-nocheck
/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.11.5
 *
 */
import type { IFluenceClient as IFluenceClient$$, CallParams as CallParams$$ } from '@fluencelabs/js-client.api';
import {
    v5_callFunction as callFunction$$,
    v5_registerService as registerService$$,
} from '@fluencelabs/js-client.api';
    


// Services

// Functions
export const getTwoResults_script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "node") [] node)
                       )
                       (new $res
                        (seq
                         (seq
                          (seq
                           (call -relay- ("op" "noop") [])
                           (xor
                            (seq
                             (seq
                              (seq
                               (seq
                                (seq
                                 (seq
                                  (seq
                                   (seq
                                    (call node ("kad" "neighborhood") [%init_peer_id% [] []] nodes)
                                    (par
                                     (fold nodes n-0
                                      (par
                                       (seq
                                        (xor
                                         (xor
                                          (call n-0 ("peer" "timestamp_sec") [] $res)
                                          (call n-0 ("op" "noop") [])
                                         )
                                         (seq
                                          (call -relay- ("op" "noop") [])
                                          (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                                         )
                                        )
                                        (call node ("op" "noop") [])
                                       )
                                       (next n-0)
                                      )
                                      (never)
                                     )
                                     (null)
                                    )
                                   )
                                   (new $res_test
                                    (seq
                                     (seq
                                      (seq
                                       (call node ("math" "add") [0 1] res_incr)
                                       (fold $res res_fold_var
                                        (seq
                                         (seq
                                          (ap res_fold_var $res_test)
                                          (canon node $res_test  #res_iter_canon)
                                         )
                                         (xor
                                          (match #res_iter_canon.length res_incr
                                           (null)
                                          )
                                          (next res_fold_var)
                                         )
                                        )
                                        (never)
                                       )
                                      )
                                      (canon node $res_test  #res_result_canon)
                                     )
                                     (ap #res_result_canon res_gate)
                                    )
                                   )
                                  )
                                  (call node ("op" "identity") [res_gate.$.[0]])
                                 )
                                 (new $res_test-0
                                  (seq
                                   (seq
                                    (seq
                                     (call node ("math" "add") [1 1] res_incr-0)
                                     (fold $res res_fold_var-0
                                      (seq
                                       (seq
                                        (ap res_fold_var-0 $res_test-0)
                                        (canon node $res_test-0  #res_iter_canon-0)
                                       )
                                       (xor
                                        (match #res_iter_canon-0.length res_incr-0
                                         (null)
                                        )
                                        (next res_fold_var-0)
                                       )
                                      )
                                      (never)
                                     )
                                    )
                                    (canon node $res_test-0  #res_result_canon-0)
                                   )
                                   (ap #res_result_canon-0 res_gate-0)
                                  )
                                 )
                                )
                                (call node ("op" "identity") [res_gate-0.$.[1]])
                               )
                               (new $res_test-1
                                (seq
                                 (seq
                                  (seq
                                   (call node ("math" "add") [2 1] res_incr-1)
                                   (fold $res res_fold_var-1
                                    (seq
                                     (seq
                                      (ap res_fold_var-1 $res_test-1)
                                      (canon node $res_test-1  #res_iter_canon-1)
                                     )
                                     (xor
                                      (match #res_iter_canon-1.length res_incr-1
                                       (null)
                                      )
                                      (next res_fold_var-1)
                                     )
                                    )
                                    (never)
                                   )
                                  )
                                  (canon node $res_test-1  #res_result_canon-1)
                                 )
                                 (ap #res_result_canon-1 res_gate-1)
                                )
                               )
                              )
                              (call node ("op" "identity") [res_gate-1.$.[2]])
                             )
                             (call -relay- ("op" "noop") [])
                            )
                            (seq
                             (call -relay- ("op" "noop") [])
                             (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                            )
                           )
                          )
                          (canon %init_peer_id% $res  #-res-fix-0)
                         )
                         (ap #-res-fix-0 -res-flat-0)
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [-res-flat-0])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                    )
    `
 

export function getTwoResults(
    node: string,
    config?: {ttl?: number}
): Promise<number[]>;

export function getTwoResults(
    peer: IFluenceClient$$,
    node: string,
    config?: {ttl?: number}
): Promise<number[]>;

export function getTwoResults(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "getTwoResults",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "node" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "u64"
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        getTwoResults_script
    )
}

/* eslint-enable */
/* eslint-disable */
// @ts-nocheck
/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.11.7
 *
 */
import type { IFluenceClient as IFluenceClient$$, CallParams as CallParams$$ } from '@fluencelabs/js-client.api';
import {
    v5_callFunction as callFunction$$,
    v5_registerService as registerService$$,
} from '@fluencelabs/js-client.api';
    


// Services

export interface TestDef {
    test1: (callParams: CallParams$$<null>) => { one: { val: string; }; } | Promise<{ one: { val: string; }; }>;
    test2: (arg1: { val: string; }, arg2: string, callParams: CallParams$$<'arg1' | 'arg2'>) => { one: { val: string; }; } | Promise<{ one: { val: string; }; }>;
}
export function registerTest(service: TestDef): void;
export function registerTest(serviceId: string, service: TestDef): void;
export function registerTest(peer: IFluenceClient$$, service: TestDef): void;
export function registerTest(peer: IFluenceClient$$, serviceId: string, service: TestDef): void;
       

export function registerTest(...args: any) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "service",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "test1" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "nil"
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "struct",
                            "name" : "NestedStruct",
                            "fields" : {
                                "one" : {
                                    "tag" : "struct",
                                    "name" : "NestedType",
                                    "fields" : {
                                        "val" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        }
                                    }
                                }
                            }
                        }
                    ]
                }
            },
            "test2" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "arg1" : {
                            "tag" : "struct",
                            "name" : "NestedType",
                            "fields" : {
                                "val" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            }
                        },
                        "arg2" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "struct",
                            "name" : "NestedStruct",
                            "fields" : {
                                "one" : {
                                    "tag" : "struct",
                                    "name" : "NestedType",
                                    "fields" : {
                                        "val" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        }
                                    }
                                }
                            }
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      
// Functions
export const test_script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                         (call %init_peer_id% ("service" "test1") [] res-0)
                        )
                        (ap res-0.$.one res-0_flat)
                       )
                       (call %init_peer_id% ("service" "test2") [res-0_flat res-0_flat.$.val] res)
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
 
export type TestResult = { one: { val: string; }; }
export function test(
    config?: {ttl?: number}
): Promise<TestResult>;

export function test(
    peer: IFluenceClient$$,
    config?: {ttl?: number}
): Promise<TestResult>;

export function test(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "test",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "NestedStruct",
                    "fields" : {
                        "one" : {
                            "tag" : "struct",
                            "name" : "NestedType",
                            "fields" : {
                                "val" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            }
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        test_script
    )
}

export const test3_script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("service" "test1") [] res)
                       )
                       (ap res.$.one res_flat)
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res_flat])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
 
export type Test3Result = { val: string; }
export function test3(
    config?: {ttl?: number}
): Promise<Test3Result>;

export function test3(
    peer: IFluenceClient$$,
    config?: {ttl?: number}
): Promise<Test3Result>;

export function test3(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "test3",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "NestedType",
                    "fields" : {
                        "val" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        test3_script
    )
}

/* eslint-enable */
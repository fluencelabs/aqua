/* eslint-disable */
// @ts-nocheck
/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.11.7
 *
 */
import type { IFluenceClient as IFluenceClient$$, CallParams as CallParams$$ } from '@fluencelabs/js-client.api';
import {
    v5_callFunction as callFunction$$,
    v5_registerService as registerService$$,
} from '@fluencelabs/js-client.api';
    


// Services

// Functions
export const lng119Bug_script = `
                    (xor
                     (seq
                      (seq
                       (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                       (new $results
                        (seq
                         (seq
                          (seq
                           (seq
                            (seq
                             (seq
                              (seq
                               (seq
                                (seq
                                 (seq
                                  (new $array-inline
                                   (seq
                                    (seq
                                     (seq
                                      (seq
                                       (seq
                                        (ap 1 $array-inline)
                                        (ap 2 $array-inline)
                                       )
                                       (ap 3 $array-inline)
                                      )
                                      (ap 4 $array-inline)
                                     )
                                     (ap 5 $array-inline)
                                    )
                                    (canon %init_peer_id% $array-inline  #array-inline-0)
                                   )
                                  )
                                  (ap 1 $results)
                                 )
                                 (ap #array-inline-0 array-inline-0_to_functor)
                                )
                                (ap array-inline-0_to_functor.length array-inline-0_length)
                               )
                               (call %init_peer_id% ("math" "sub") [array-inline-0_length 5] sub)
                              )
                              (new $results_test
                               (seq
                                (seq
                                 (seq
                                  (call %init_peer_id% ("math" "add") [sub 1] results_incr)
                                  (fold $results results_fold_var
                                   (seq
                                    (seq
                                     (ap results_fold_var $results_test)
                                     (canon %init_peer_id% $results_test  #results_iter_canon)
                                    )
                                    (xor
                                     (match #results_iter_canon.length results_incr
                                      (null)
                                     )
                                     (next results_fold_var)
                                    )
                                   )
                                   (never)
                                  )
                                 )
                                 (canon %init_peer_id% $results_test  #results_result_canon)
                                )
                                (ap #results_result_canon results_gate)
                               )
                              )
                             )
                             (ap #array-inline-0 array-inline-0_to_functor-0)
                            )
                            (ap array-inline-0_to_functor-0.length array-inline-0_length-0)
                           )
                           (call %init_peer_id% ("math" "sub") [array-inline-0_length-0 5] sub-0)
                          )
                          (canon %init_peer_id% $results  #-results-fix-0)
                         )
                         (ap #-results-fix-0 -results-flat-0)
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [-results-flat-0])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
 

export function lng119Bug(
    config?: {ttl?: number}
): Promise<number[]>;

export function lng119Bug(
    peer: IFluenceClient$$,
    config?: {ttl?: number}
): Promise<number[]>;

export function lng119Bug(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "lng119Bug",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "u32"
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        lng119Bug_script
    )
}

/* eslint-enable */
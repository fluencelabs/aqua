/* eslint-disable */
// @ts-nocheck
/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.11.7
 *
 */
import type { IFluenceClient as IFluenceClient$$, CallParams as CallParams$$ } from '@fluencelabs/js-client.api';
import {
    v5_callFunction as callFunction$$,
    v5_registerService as registerService$$,
} from '@fluencelabs/js-client.api';
    


// Services

// Functions
export const joinIdxLocal_script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                         (call %init_peer_id% ("getDataSrv" "idx") [] idx)
                        )
                        (call %init_peer_id% ("getDataSrv" "nodes") [] nodes)
                       )
                       (new $nodes2
                        (seq
                         (seq
                          (seq
                           (par
                            (fold nodes node-0
                             (par
                              (ap node-0 $nodes2)
                              (next node-0)
                             )
                             (never)
                            )
                            (null)
                           )
                           (new $nodes2_test
                            (seq
                             (seq
                              (seq
                               (call %init_peer_id% ("math" "add") [idx 1] nodes2_incr)
                               (fold $nodes2 nodes2_fold_var
                                (seq
                                 (seq
                                  (ap nodes2_fold_var $nodes2_test)
                                  (canon %init_peer_id% $nodes2_test  #nodes2_iter_canon)
                                 )
                                 (xor
                                  (match #nodes2_iter_canon.length nodes2_incr
                                   (null)
                                  )
                                  (next nodes2_fold_var)
                                 )
                                )
                                (never)
                               )
                              )
                              (canon %init_peer_id% $nodes2_test  #nodes2_result_canon)
                             )
                             (ap #nodes2_result_canon nodes2_gate)
                            )
                           )
                          )
                          (canon %init_peer_id% $nodes2  #-nodes2-fix-0)
                         )
                         (ap #-nodes2-fix-0 -nodes2-flat-0)
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [-nodes2-flat-0])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
 

export function joinIdxLocal(
    idx: number,
    nodes: string[],
    config?: {ttl?: number}
): Promise<string[]>;

export function joinIdxLocal(
    peer: IFluenceClient$$,
    idx: number,
    nodes: string[],
    config?: {ttl?: number}
): Promise<string[]>;

export function joinIdxLocal(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "joinIdxLocal",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "idx" : {
                    "tag" : "scalar",
                    "name" : "i16"
                },
                "nodes" : {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        joinIdxLocal_script
    )
}

export const joinIdxRelay_script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                         (call %init_peer_id% ("getDataSrv" "idx") [] idx)
                        )
                        (call %init_peer_id% ("getDataSrv" "nodes") [] nodes)
                       )
                       (new $nodes2
                        (seq
                         (seq
                          (xor
                           (seq
                            (par
                             (fold nodes node-0
                              (par
                               (ap node-0 $nodes2)
                               (next node-0)
                              )
                              (never)
                             )
                             (null)
                            )
                            (new $nodes2_test
                             (seq
                              (seq
                               (seq
                                (call -relay- ("math" "add") [idx 1] nodes2_incr)
                                (fold $nodes2 nodes2_fold_var
                                 (seq
                                  (seq
                                   (ap nodes2_fold_var $nodes2_test)
                                   (canon -relay- $nodes2_test  #nodes2_iter_canon)
                                  )
                                  (xor
                                   (match #nodes2_iter_canon.length nodes2_incr
                                    (null)
                                   )
                                   (next nodes2_fold_var)
                                  )
                                 )
                                 (never)
                                )
                               )
                               (canon -relay- $nodes2_test  #nodes2_result_canon)
                              )
                              (ap #nodes2_result_canon nodes2_gate)
                             )
                            )
                           )
                           (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                          )
                          (canon %init_peer_id% $nodes2  #-nodes2-fix-0)
                         )
                         (ap #-nodes2-fix-0 -nodes2-flat-0)
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [-nodes2-flat-0])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
 

export function joinIdxRelay(
    idx: number,
    nodes: string[],
    config?: {ttl?: number}
): Promise<string[]>;

export function joinIdxRelay(
    peer: IFluenceClient$$,
    idx: number,
    nodes: string[],
    config?: {ttl?: number}
): Promise<string[]>;

export function joinIdxRelay(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "joinIdxRelay",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "idx" : {
                    "tag" : "scalar",
                    "name" : "i16"
                },
                "nodes" : {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        joinIdxRelay_script
    )
}

export const joinIdx_script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                         (call %init_peer_id% ("getDataSrv" "idx") [] idx)
                        )
                        (call %init_peer_id% ("getDataSrv" "nodes") [] nodes)
                       )
                       (new $nodes2
                        (new $infos
                         (seq
                          (seq
                           (seq
                            (par
                             (fold nodes node-0
                              (par
                               (seq
                                (seq
                                 (seq
                                  (call -relay- ("op" "noop") [])
                                  (xor
                                   (seq
                                    (call node-0 ("peer" "identify") [] $infos)
                                    (ap node-0 $nodes2)
                                   )
                                   (seq
                                    (call -relay- ("op" "noop") [])
                                    (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                                   )
                                  )
                                 )
                                 (call -relay- ("op" "noop") [])
                                )
                                (call %init_peer_id% ("op" "noop") [])
                               )
                               (next node-0)
                              )
                              (never)
                             )
                             (null)
                            )
                            (par
                             (seq
                              (seq
                               (seq
                                (seq
                                 (call %init_peer_id% ("math" "sub") [idx 1] sub)
                                 (call %init_peer_id% ("math" "add") [sub 1] add)
                                )
                                (new $infos_test
                                 (seq
                                  (seq
                                   (seq
                                    (call %init_peer_id% ("math" "add") [add 1] infos_incr)
                                    (fold $infos infos_fold_var
                                     (seq
                                      (seq
                                       (ap infos_fold_var $infos_test)
                                       (canon %init_peer_id% $infos_test  #infos_iter_canon)
                                      )
                                      (xor
                                       (match #infos_iter_canon.length infos_incr
                                        (null)
                                       )
                                       (next infos_fold_var)
                                      )
                                     )
                                     (never)
                                    )
                                   )
                                   (canon %init_peer_id% $infos_test  #infos_result_canon)
                                  )
                                  (ap #infos_result_canon infos_gate)
                                 )
                                )
                               )
                               (call %init_peer_id% ("math" "sub") [idx 1] sub-0)
                              )
                              (call %init_peer_id% ("math" "add") [sub-0 1] add-0)
                             )
                             (seq
                              (seq
                               (seq
                                (seq
                                 (call %init_peer_id% ("math" "sub") [idx 1] sub-1)
                                 (call %init_peer_id% ("math" "add") [sub-1 1] add-1)
                                )
                                (new $nodes2_test
                                 (seq
                                  (seq
                                   (seq
                                    (call %init_peer_id% ("math" "add") [add-1 1] nodes2_incr)
                                    (fold $nodes2 nodes2_fold_var
                                     (seq
                                      (seq
                                       (ap nodes2_fold_var $nodes2_test)
                                       (canon %init_peer_id% $nodes2_test  #nodes2_iter_canon)
                                      )
                                      (xor
                                       (match #nodes2_iter_canon.length nodes2_incr
                                        (null)
                                       )
                                       (next nodes2_fold_var)
                                      )
                                     )
                                     (never)
                                    )
                                   )
                                   (canon %init_peer_id% $nodes2_test  #nodes2_result_canon)
                                  )
                                  (ap #nodes2_result_canon nodes2_gate)
                                 )
                                )
                               )
                               (call %init_peer_id% ("math" "sub") [idx 1] sub-2)
                              )
                              (call %init_peer_id% ("math" "add") [sub-2 1] add-2)
                             )
                            )
                           )
                           (canon %init_peer_id% $infos  #-infos-fix-0)
                          )
                          (ap #-infos-fix-0 -infos-flat-0)
                         )
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [-infos-flat-0])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
 

export function joinIdx(
    idx: number,
    nodes: string[],
    config?: {ttl?: number}
): Promise<{ air_version: string; external_addresses: string[]; node_version: string; }[]>;

export function joinIdx(
    peer: IFluenceClient$$,
    idx: number,
    nodes: string[],
    config?: {ttl?: number}
): Promise<{ air_version: string; external_addresses: string[]; node_version: string; }[]>;

export function joinIdx(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "joinIdx",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "idx" : {
                    "tag" : "scalar",
                    "name" : "i16"
                },
                "nodes" : {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "struct",
                        "name" : "Info",
                        "fields" : {
                            "air_version" : {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            "external_addresses" : {
                                "tag" : "array",
                                "type" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            },
                            "node_version" : {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        joinIdx_script
    )
}

/* eslint-enable */
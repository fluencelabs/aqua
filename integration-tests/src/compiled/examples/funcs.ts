/* eslint-disable */
// @ts-nocheck
/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.11.5
 *
 */
import type { IFluenceClient as IFluenceClient$$, CallParams as CallParams$$ } from '@fluencelabs/js-client.api';
import {
    v5_callFunction as callFunction$$,
    v5_registerService as registerService$$,
} from '@fluencelabs/js-client.api';
    


// Services

export interface ADef {
    getJ: (i: number, callParams: CallParams$$<'i'>) => number | Promise<number>;
}
export function registerA(service: ADef): void;
export function registerA(serviceId: string, service: ADef): void;
export function registerA(peer: IFluenceClient$$, service: ADef): void;
export function registerA(peer: IFluenceClient$$, serviceId: string, service: ADef): void;
       

export function registerA(...args: any) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "a",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "getJ" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "i" : {
                            "tag" : "scalar",
                            "name" : "u32"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "u32"
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      
// Functions
export const main_script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (seq
                             (seq
                              (seq
                               (seq
                                (seq
                                 (seq
                                  (seq
                                   (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                                   (new $array-inline
                                    (seq
                                     (seq
                                      (seq
                                       (seq
                                        (seq
                                         (seq
                                          (seq
                                           (seq
                                            (seq
                                             (seq
                                              (seq
                                               (seq
                                                (seq
                                                 (seq
                                                  (seq
                                                   (seq
                                                    (seq
                                                     (seq
                                                      (seq
                                                       (seq
                                                        (ap 0 $array-inline)
                                                        (ap 1 $array-inline)
                                                       )
                                                       (ap 2 $array-inline)
                                                      )
                                                      (ap 3 $array-inline)
                                                     )
                                                     (ap 4 $array-inline)
                                                    )
                                                    (ap 5 $array-inline)
                                                   )
                                                   (ap 6 $array-inline)
                                                  )
                                                  (ap 7 $array-inline)
                                                 )
                                                 (ap 8 $array-inline)
                                                )
                                                (ap 9 $array-inline)
                                               )
                                               (ap 10 $array-inline)
                                              )
                                              (ap 11 $array-inline)
                                             )
                                             (ap 12 $array-inline)
                                            )
                                            (ap 13 $array-inline)
                                           )
                                           (ap 14 $array-inline)
                                          )
                                          (ap 15 $array-inline)
                                         )
                                         (ap 16 $array-inline)
                                        )
                                        (ap 17 $array-inline)
                                       )
                                       (ap 18 $array-inline)
                                      )
                                      (ap 19 $array-inline)
                                     )
                                     (canon %init_peer_id% $array-inline  #array-inline-0)
                                    )
                                   )
                                  )
                                  (call %init_peer_id% ("a" "getJ") [3] getJ)
                                 )
                                 (call %init_peer_id% ("math" "add") [getJ 2] add)
                                )
                                (ap #array-inline-0.$.[add] array-inline-0_flatten)
                               )
                               (call %init_peer_id% ("a" "getJ") [array-inline-0_flatten] idx1)
                              )
                              (par
                               (seq
                                (seq
                                 (call %init_peer_id% ("a" "getJ") [3] getJ-0)
                                 (call %init_peer_id% ("math" "add") [getJ-0 3] add-1)
                                )
                                (ap #array-inline-0.$.[add-1] array-inline-0_flatten-0)
                               )
                               (seq
                                (seq
                                 (call %init_peer_id% ("a" "getJ") [1] getJ-1)
                                 (call %init_peer_id% ("math" "sub") [getJ-1 1] sub-0)
                                )
                                (ap #array-inline-0.$.[sub-0] array-inline-0_flatten-1)
                               )
                              )
                             )
                             (call %init_peer_id% ("math" "add") [array-inline-0_flatten-0 array-inline-0_flatten-1] add-0)
                            )
                            (call %init_peer_id% ("math" "sub") [add-0 3] sub)
                           )
                           (call %init_peer_id% ("a" "getJ") [sub] idx2)
                          )
                          (par
                           (seq
                            (par
                             (call %init_peer_id% ("math" "add") [idx1 idx2] add-4)
                             (seq
                              (ap #array-inline-0.$.[2] array-inline-0_flatten-2)
                              (call %init_peer_id% ("a" "getJ") [array-inline-0_flatten-2] some)
                             )
                            )
                            (call %init_peer_id% ("math" "add") [add-4 some] add-3)
                           )
                           (seq
                            (ap #array-inline-0.$.[3] array-inline-0_flatten-3)
                            (call %init_peer_id% ("a" "getJ") [array-inline-0_flatten-3] some-0)
                           )
                          )
                         )
                         (call %init_peer_id% ("math" "add") [add-3 some-0] add-2)
                        )
                        (ap #array-inline-0.$.[add-2] array-inline-0_flatten-4)
                       )
                       (call %init_peer_id% ("a" "getJ") [array-inline-0_flatten-4] getJ-2)
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [getJ-2])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
 

export function main(
    log: (arg0: string, arg1: number[], callParams: CallParams$$<'arg0' | 'arg1'>) => void | Promise<void>,
    config?: {ttl?: number}
): Promise<number>;

export function main(
    peer: IFluenceClient$$,
    log: (arg0: string, arg1: number[], callParams: CallParams$$<'arg0' | 'arg1'>) => void | Promise<void>,
    config?: {ttl?: number}
): Promise<number>;

export function main(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "main",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "log" : {
                    "tag" : "arrow",
                    "domain" : {
                        "tag" : "unlabeledProduct",
                        "items" : [
                            {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            {
                                "tag" : "array",
                                "type" : {
                                    "tag" : "scalar",
                                    "name" : "u32"
                                }
                            }
                        ]
                    },
                    "codomain" : {
                        "tag" : "nil"
                    }
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "u32"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        main_script
    )
}

export const calc2_script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (seq
                             (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                             (new $array-inline
                              (seq
                               (seq
                                (seq
                                 (seq
                                  (seq
                                   (seq
                                    (seq
                                     (seq
                                      (seq
                                       (seq
                                        (seq
                                         (seq
                                          (seq
                                           (seq
                                            (seq
                                             (seq
                                              (seq
                                               (seq
                                                (seq
                                                 (seq
                                                  (ap 0 $array-inline)
                                                  (ap 1 $array-inline)
                                                 )
                                                 (ap 2 $array-inline)
                                                )
                                                (ap 3 $array-inline)
                                               )
                                               (ap 4 $array-inline)
                                              )
                                              (ap 5 $array-inline)
                                             )
                                             (ap 6 $array-inline)
                                            )
                                            (ap 7 $array-inline)
                                           )
                                           (ap 8 $array-inline)
                                          )
                                          (ap 9 $array-inline)
                                         )
                                         (ap 10 $array-inline)
                                        )
                                        (ap 11 $array-inline)
                                       )
                                       (ap 12 $array-inline)
                                      )
                                      (ap 13 $array-inline)
                                     )
                                     (ap 14 $array-inline)
                                    )
                                    (ap 15 $array-inline)
                                   )
                                   (ap 16 $array-inline)
                                  )
                                  (ap 17 $array-inline)
                                 )
                                 (ap 18 $array-inline)
                                )
                                (ap 19 $array-inline)
                               )
                               (canon %init_peer_id% $array-inline  #array-inline-0)
                              )
                             )
                            )
                            (par
                             (seq
                              (call %init_peer_id% ("math" "sub") [5 2] sub-0)
                              (call %init_peer_id% ("math" "mul") [sub-0 3] mul)
                             )
                             (seq
                              (seq
                               (par
                                (seq
                                 (call %init_peer_id% ("math" "add") [5 5] add)
                                 (call %init_peer_id% ("a" "getJ") [add] getJ)
                                )
                                (seq
                                 (seq
                                  (call %init_peer_id% ("math" "sub") [3 1] sub-2)
                                  (call %init_peer_id% ("math" "pow") [3 sub-2] pow-0)
                                 )
                                 (call %init_peer_id% ("a" "getJ") [pow-0] getJ-0)
                                )
                               )
                               (call %init_peer_id% ("math" "sub") [getJ getJ-0] sub-1)
                              )
                              (call %init_peer_id% ("math" "pow") [3 sub-1] pow)
                             )
                            )
                           )
                           (call %init_peer_id% ("math" "sub") [mul pow] sub)
                          )
                          (call %init_peer_id% ("a" "getJ") [sub] num)
                         )
                         (par
                          (call %init_peer_id% ("math" "add") [num num] add-0)
                          (call %init_peer_id% ("a" "getJ") [num] getJ-1)
                         )
                        )
                        (call %init_peer_id% ("math" "sub") [add-0 getJ-1] sub-4)
                       )
                       (call %init_peer_id% ("math" "sub") [sub-4 3] sub-3)
                      )
                      (xor
                       (seq
                        (ap #array-inline-0.$.[sub-3] array-inline-0_flatten)
                        (call %init_peer_id% ("callbackSrv" "response") [array-inline-0_flatten])
                       )
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
 

export function calc2(
    log: (arg0: string, arg1: number[], callParams: CallParams$$<'arg0' | 'arg1'>) => void | Promise<void>,
    config?: {ttl?: number}
): Promise<number>;

export function calc2(
    peer: IFluenceClient$$,
    log: (arg0: string, arg1: number[], callParams: CallParams$$<'arg0' | 'arg1'>) => void | Promise<void>,
    config?: {ttl?: number}
): Promise<number>;

export function calc2(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "calc2",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "log" : {
                    "tag" : "arrow",
                    "domain" : {
                        "tag" : "unlabeledProduct",
                        "items" : [
                            {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            {
                                "tag" : "array",
                                "type" : {
                                    "tag" : "scalar",
                                    "name" : "u32"
                                }
                            }
                        ]
                    },
                    "codomain" : {
                        "tag" : "nil"
                    }
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "u32"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        calc2_script
    )
}

export const ifCalc_script = `
                    (xor
                     (seq
                      (seq
                       (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                       (new $res
                        (seq
                         (seq
                          (new $array-inline
                           (seq
                            (seq
                             (seq
                              (seq
                               (seq
                                (seq
                                 (seq
                                  (seq
                                   (seq
                                    (seq
                                     (seq
                                      (seq
                                       (seq
                                        (seq
                                         (seq
                                          (seq
                                           (seq
                                            (seq
                                             (seq
                                              (seq
                                               (ap 0 $array-inline)
                                               (ap 1 $array-inline)
                                              )
                                              (ap 2 $array-inline)
                                             )
                                             (ap 3 $array-inline)
                                            )
                                            (ap 4 $array-inline)
                                           )
                                           (ap 5 $array-inline)
                                          )
                                          (ap 6 $array-inline)
                                         )
                                         (ap 7 $array-inline)
                                        )
                                        (ap 8 $array-inline)
                                       )
                                       (ap 9 $array-inline)
                                      )
                                      (ap 10 $array-inline)
                                     )
                                     (ap 11 $array-inline)
                                    )
                                    (ap 12 $array-inline)
                                   )
                                   (ap 13 $array-inline)
                                  )
                                  (ap 14 $array-inline)
                                 )
                                 (ap 15 $array-inline)
                                )
                                (ap 16 $array-inline)
                               )
                               (ap 17 $array-inline)
                              )
                              (ap 18 $array-inline)
                             )
                             (ap 19 $array-inline)
                            )
                            (canon %init_peer_id% $array-inline  #array-inline-0)
                           )
                          )
                          (xor
                           (seq
                            (seq
                             (par
                              (seq
                               (par
                                (seq
                                 (call %init_peer_id% ("math" "sub") [8 2] sub)
                                 (call %init_peer_id% ("a" "getJ") [sub] getJ)
                                )
                                (seq
                                 (call %init_peer_id% ("math" "rem") [4 2] rem)
                                 (call %init_peer_id% ("a" "getJ") [rem] getJ-0)
                                )
                               )
                               (call %init_peer_id% ("math" "add") [getJ getJ-0] add)
                              )
                              (seq
                               (seq
                                (seq
                                 (par
                                  (call %init_peer_id% ("math" "sub") [5 3] sub-1)
                                  (call %init_peer_id% ("a" "getJ") [3] getJ-1)
                                 )
                                 (call %init_peer_id% ("math" "add") [sub-1 getJ-1] add-0)
                                )
                                (ap #array-inline-0.$.[add-0] array-inline-0_flatten)
                               )
                               (call %init_peer_id% ("math" "sub") [array-inline-0_flatten 2] sub-0)
                              )
                             )
                             (call %init_peer_id% ("cmp" "gt") [add sub-0] gt)
                            )
                            (match gt true
                             (ap 1 $res)
                            )
                           )
                           (ap 2 $res)
                          )
                         )
                         (new $res_test
                          (seq
                           (seq
                            (seq
                             (call %init_peer_id% ("math" "add") [0 1] res_incr)
                             (fold $res res_fold_var
                              (seq
                               (seq
                                (ap res_fold_var $res_test)
                                (canon %init_peer_id% $res_test  #res_iter_canon)
                               )
                               (xor
                                (match #res_iter_canon.length res_incr
                                 (null)
                                )
                                (next res_fold_var)
                               )
                              )
                              (never)
                             )
                            )
                            (canon %init_peer_id% $res_test  #res_result_canon)
                           )
                           (ap #res_result_canon res_gate)
                          )
                         )
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res_gate.$.[0]])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
 

export function ifCalc(
    config?: {ttl?: number}
): Promise<number>;

export function ifCalc(
    peer: IFluenceClient$$,
    config?: {ttl?: number}
): Promise<number>;

export function ifCalc(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "ifCalc",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "u64"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        ifCalc_script
    )
}

export const calc_script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (seq
                             (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                             (new $array-inline
                              (seq
                               (seq
                                (seq
                                 (seq
                                  (seq
                                   (seq
                                    (seq
                                     (seq
                                      (seq
                                       (seq
                                        (seq
                                         (seq
                                          (seq
                                           (seq
                                            (seq
                                             (seq
                                              (seq
                                               (seq
                                                (seq
                                                 (seq
                                                  (ap 0 $array-inline)
                                                  (ap 1 $array-inline)
                                                 )
                                                 (ap 2 $array-inline)
                                                )
                                                (ap 3 $array-inline)
                                               )
                                               (ap 4 $array-inline)
                                              )
                                              (ap 5 $array-inline)
                                             )
                                             (ap 6 $array-inline)
                                            )
                                            (ap 7 $array-inline)
                                           )
                                           (ap 8 $array-inline)
                                          )
                                          (ap 9 $array-inline)
                                         )
                                         (ap 10 $array-inline)
                                        )
                                        (ap 11 $array-inline)
                                       )
                                       (ap 12 $array-inline)
                                      )
                                      (ap 13 $array-inline)
                                     )
                                     (ap 14 $array-inline)
                                    )
                                    (ap 15 $array-inline)
                                   )
                                   (ap 16 $array-inline)
                                  )
                                  (ap 17 $array-inline)
                                 )
                                 (ap 18 $array-inline)
                                )
                                (ap 19 $array-inline)
                               )
                               (canon %init_peer_id% $array-inline  #array-inline-0)
                              )
                             )
                            )
                            (call %init_peer_id% ("math" "sub") [5 2] sub-0)
                           )
                           (call %init_peer_id% ("math" "mul") [sub-0 3] mul)
                          )
                          (call %init_peer_id% ("math" "sub") [mul 3] sub)
                         )
                         (call %init_peer_id% ("a" "getJ") [sub] num)
                        )
                        (new $array-inline-1
                         (seq
                          (ap num $array-inline-1)
                          (canon %init_peer_id% $array-inline-1  #array-inline-1-0)
                         )
                        )
                       )
                       (xor
                        (call %init_peer_id% ("callbackSrv" "log") ["calc 2" #array-inline-1-0])
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                       )
                      )
                      (xor
                       (seq
                        (ap #array-inline-0.$.[num] array-inline-0_flatten)
                        (call %init_peer_id% ("callbackSrv" "response") [array-inline-0_flatten])
                       )
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
 

export function calc(
    log: (arg0: string, arg1: number[], callParams: CallParams$$<'arg0' | 'arg1'>) => void | Promise<void>,
    config?: {ttl?: number}
): Promise<number>;

export function calc(
    peer: IFluenceClient$$,
    log: (arg0: string, arg1: number[], callParams: CallParams$$<'arg0' | 'arg1'>) => void | Promise<void>,
    config?: {ttl?: number}
): Promise<number>;

export function calc(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "calc",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "log" : {
                    "tag" : "arrow",
                    "domain" : {
                        "tag" : "unlabeledProduct",
                        "items" : [
                            {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            {
                                "tag" : "array",
                                "type" : {
                                    "tag" : "scalar",
                                    "name" : "u32"
                                }
                            }
                        ]
                    },
                    "codomain" : {
                        "tag" : "nil"
                    }
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "u32"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        calc_script
    )
}

/* eslint-enable */
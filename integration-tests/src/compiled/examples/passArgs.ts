/* eslint-disable */
// @ts-nocheck
/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.11.5
 *
 */
import type { IFluenceClient as IFluenceClient$$, CallParams as CallParams$$ } from '@fluencelabs/js-client.api';
import {
    v5_callFunction as callFunction$$,
    v5_registerService as registerService$$,
} from '@fluencelabs/js-client.api';
    


// Services

export interface AquaDHTDef {
    put_host_value: (key: string, value: string, service_id: string[], callParams: CallParams$$<'key' | 'value' | 'service_id'>) => string | Promise<string>;
}
export function registerAquaDHT(service: AquaDHTDef): void;
export function registerAquaDHT(serviceId: string, service: AquaDHTDef): void;
export function registerAquaDHT(peer: IFluenceClient$$, service: AquaDHTDef): void;
export function registerAquaDHT(peer: IFluenceClient$$, serviceId: string, service: AquaDHTDef): void;
       

export function registerAquaDHT(...args: any) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "test-dht",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "put_host_value" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "key" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "value" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "service_id" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      
// Functions
export const wait_script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                           (call %init_peer_id% ("getDataSrv" "successful") [] successful-iter)
                          )
                          (fold successful-iter successful-item-0
                           (seq
                            (ap successful-item-0 $successful)
                            (next successful-item-0)
                           )
                          )
                         )
                         (call %init_peer_id% ("getDataSrv" "n") [] n)
                        )
                        (call %init_peer_id% ("math" "sub") [n 1] sub)
                       )
                       (new $successful_test
                        (seq
                         (seq
                          (seq
                           (call %init_peer_id% ("math" "add") [sub 1] successful_incr)
                           (fold $successful successful_fold_var
                            (seq
                             (seq
                              (ap successful_fold_var $successful_test)
                              (canon %init_peer_id% $successful_test  #successful_iter_canon)
                             )
                             (xor
                              (match #successful_iter_canon.length successful_incr
                               (null)
                              )
                              (next successful_fold_var)
                             )
                            )
                            (never)
                           )
                          )
                          (canon %init_peer_id% $successful_test  #successful_result_canon)
                         )
                         (ap #successful_result_canon successful_gate)
                        )
                       )
                      )
                      (call %init_peer_id% ("math" "sub") [n 1] sub-0)
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                    )
    `
 

export function wait(
    successful: boolean[],
    n: number,
    config?: {ttl?: number}
): Promise<void>;

export function wait(
    peer: IFluenceClient$$,
    successful: boolean[],
    n: number,
    config?: {ttl?: number}
): Promise<void>;

export function wait(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "wait",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "successful" : {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "bool"
                    }
                },
                "n" : {
                    "tag" : "scalar",
                    "name" : "i16"
                }
            }
        },
        "codomain" : {
            "tag" : "nil"
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        wait_script
    )
}

export const bugLNG60_script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "node") [] node)
                       )
                       (new $successful
                        (seq
                         (seq
                          (seq
                           (seq
                            (new $array-inline
                             (seq
                              (ap node $array-inline)
                              (canon %init_peer_id% $array-inline  #array-inline-0)
                             )
                            )
                            (fold #array-inline-0 n-0
                             (seq
                              (ap true $successful)
                              (next n-0)
                             )
                            )
                           )
                           (call %init_peer_id% ("math" "sub") [1 1] sub)
                          )
                          (new $successful_test
                           (seq
                            (seq
                             (seq
                              (call %init_peer_id% ("math" "add") [sub 1] successful_incr)
                              (fold $successful successful_fold_var
                               (seq
                                (seq
                                 (ap successful_fold_var $successful_test)
                                 (canon %init_peer_id% $successful_test  #successful_iter_canon)
                                )
                                (xor
                                 (match #successful_iter_canon.length successful_incr
                                  (null)
                                 )
                                 (next successful_fold_var)
                                )
                               )
                               (never)
                              )
                             )
                             (canon %init_peer_id% $successful_test  #successful_result_canon)
                            )
                            (ap #successful_result_canon successful_gate)
                           )
                          )
                         )
                         (call %init_peer_id% ("math" "sub") [1 1] sub-0)
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [true])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
 

export function bugLNG60(
    node: string,
    config?: {ttl?: number}
): Promise<boolean>;

export function bugLNG60(
    peer: IFluenceClient$$,
    node: string,
    config?: {ttl?: number}
): Promise<boolean>;

export function bugLNG60(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "bugLNG60",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "node" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "bool"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        bugLNG60_script
    )
}

export const create_client_util_script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "service_id") [] service_id)
                       )
                       (call %init_peer_id% ("test-dht" "put_host_value") ["client-util" service_id []] res)
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
 

export function create_client_util(
    service_id: string,
    config?: {ttl?: number}
): Promise<string>;

export function create_client_util(
    peer: IFluenceClient$$,
    service_id: string,
    config?: {ttl?: number}
): Promise<string>;

export function create_client_util(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "create_client_util",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "service_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "string"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        create_client_util_script
    )
}

export const putHostValue_script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                          (call %init_peer_id% ("getDataSrv" "key") [] key)
                         )
                         (call %init_peer_id% ("getDataSrv" "value") [] value)
                        )
                        (call %init_peer_id% ("getDataSrv" "service_id") [] service_id)
                       )
                       (call %init_peer_id% ("test-dht" "put_host_value") [key value service_id] res)
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
 

export function putHostValue(
    key: string,
    value: string,
    service_id: string | null,
    config?: {ttl?: number}
): Promise<string>;

export function putHostValue(
    peer: IFluenceClient$$,
    key: string,
    value: string,
    service_id: string | null,
    config?: {ttl?: number}
): Promise<string>;

export function putHostValue(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "putHostValue",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "key" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "value" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "service_id" : {
                    "tag" : "option",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "string"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        putHostValue_script
    )
}

/* eslint-enable */
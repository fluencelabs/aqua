/* eslint-disable */
// @ts-nocheck
/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.11.5
 *
 */
import type { IFluenceClient as IFluenceClient$$, CallParams as CallParams$$ } from '@fluencelabs/js-client.api';
import {
    v5_callFunction as callFunction$$,
    v5_registerService as registerService$$,
} from '@fluencelabs/js-client.api';
    


// Services

// Functions
export const getClosure_script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                         (call %init_peer_id% ("getDataSrv" "arg") [] arg)
                        )
                        (call %init_peer_id% ("getDataSrv" "peer") [] peer)
                       )
                       (call -relay- ("op" "noop") [])
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [closure])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
 

export function getClosure(
    arg: number,
    peer_: string,
    config?: {ttl?: number}
): Promise<(arg0: number, callParams: CallParams$$<'arg0'>) => number | Promise<number>>;

export function getClosure(
    peer: IFluenceClient$$,
    arg: number,
    peer_: string,
    config?: {ttl?: number}
): Promise<(arg0: number, callParams: CallParams$$<'arg0'>) => number | Promise<number>>;

export function getClosure(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "getClosure",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "arg" : {
                    "tag" : "scalar",
                    "name" : "u16"
                },
                "peer" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "arrow",
                    "domain" : {
                        "tag" : "unlabeledProduct",
                        "items" : [
                            {
                                "tag" : "scalar",
                                "name" : "u16"
                            }
                        ]
                    },
                    "codomain" : {
                        "tag" : "unlabeledProduct",
                        "items" : [
                            {
                                "tag" : "scalar",
                                "name" : "u16"
                            }
                        ]
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        getClosure_script
    )
}

export const lng193Bug_script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                           (call %init_peer_id% ("getDataSrv" "peer") [] peer)
                          )
                          (call %init_peer_id% ("getDataSrv" "closurePeer") [] closurePeer)
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (xor
                         (seq
                          (seq
                           (seq
                            (seq
                             (par
                              (seq
                               (call closurePeer ("math" "add") [42 1] add-0)
                               (call peer ("op" "noop") [])
                              )
                              (seq
                               (call closurePeer ("math" "add") [42 2] add-1)
                               (call peer ("op" "noop") [])
                              )
                             )
                             (call peer ("math" "add") [add-0 add-1] add)
                            )
                            (par
                             (seq
                              (call closurePeer ("math" "add") [42 3] add-3)
                              (call peer ("op" "noop") [])
                             )
                             (seq
                              (call closurePeer ("math" "add") [42 4] add-4)
                              (call peer ("op" "noop") [])
                             )
                            )
                           )
                           (call peer ("math" "add") [add-3 add-4] add-2)
                          )
                          (call -relay- ("op" "noop") [])
                         )
                         (seq
                          (call -relay- ("op" "noop") [])
                          (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                         )
                        )
                       )
                       (call %init_peer_id% ("math" "add") [add add-2] add-5)
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [add-5])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
 

export function lng193Bug(
    peer_: string,
    closurePeer: string,
    config?: {ttl?: number}
): Promise<number>;

export function lng193Bug(
    peer: IFluenceClient$$,
    peer_: string,
    closurePeer: string,
    config?: {ttl?: number}
): Promise<number>;

export function lng193Bug(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "lng193Bug",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "peer" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "closurePeer" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "u16"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        lng193Bug_script
    )
}

/* eslint-enable */
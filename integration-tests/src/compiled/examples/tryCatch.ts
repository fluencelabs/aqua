/* eslint-disable */
// @ts-nocheck
/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.11.5
 *
 */
import type { IFluenceClient as IFluenceClient$$, CallParams as CallParams$$ } from '@fluencelabs/js-client.api';
import {
    v5_callFunction as callFunction$$,
    v5_registerService as registerService$$,
} from '@fluencelabs/js-client.api';
    


// Services

export interface UnexistedDef {
    getStr: (callParams: CallParams$$<null>) => string | Promise<string>;
}
export function registerUnexisted(service: UnexistedDef): void;
export function registerUnexisted(serviceId: string, service: UnexistedDef): void;
export function registerUnexisted(peer: IFluenceClient$$, service: UnexistedDef): void;
export function registerUnexisted(peer: IFluenceClient$$, serviceId: string, service: UnexistedDef): void;
       

export function registerUnexisted(...args: any) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "unex",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "getStr" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "nil"
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      


export interface OpADef {
    identity: (s: string, callParams: CallParams$$<'s'>) => string | Promise<string>;
}
export function registerOpA(service: OpADef): void;
export function registerOpA(serviceId: string, service: OpADef): void;
export function registerOpA(peer: IFluenceClient$$, service: OpADef): void;
export function registerOpA(peer: IFluenceClient$$, serviceId: string, service: OpADef): void;
       

export function registerOpA(...args: any) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "op",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "identity" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "s" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      
// Functions
export const tryCatchTest_script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "node_id") [] node_id)
                       )
                       (new $f
                        (seq
                         (seq
                          (seq
                           (call -relay- ("op" "noop") [])
                           (xor
                            (xor
                             (seq
                              (call node_id ("unex" "getStr") [] $f)
                              (call -relay- ("op" "noop") [])
                             )
                             (seq
                              (seq
                               (seq
                                (call node_id ("op" "identity") [%last_error%.$.message] $f)
                                (call node_id ("peer" "identify") [] i)
                               )
                               (call node_id ("op" "identity") [i.$.external_addresses.[0]] $f)
                              )
                              (call -relay- ("op" "noop") [])
                             )
                            )
                            (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                           )
                          )
                          (canon %init_peer_id% $f  #-f-fix-0)
                         )
                         (ap #-f-fix-0 -f-flat-0)
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [-f-flat-0])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
 

export function tryCatchTest(
    node_id: string,
    config?: {ttl?: number}
): Promise<string[]>;

export function tryCatchTest(
    peer: IFluenceClient$$,
    node_id: string,
    config?: {ttl?: number}
): Promise<string[]>;

export function tryCatchTest(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "tryCatchTest",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "node_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        tryCatchTest_script
    )
}

/* eslint-enable */
aqua ClosureStreamScopes

export simpleTest, complexTest

ability Join:
  join1() -> []string

ability Fork:
  fork() -> Join

func simpleTest() -> []string:

  fork = () -> Join:
    in: *string
    join1 = () -> []string:

      in <<- "something in nested"

      <- ["result"]
    in <<- "something in"
    <- Join(join1)
  f = Fork(fork)

  j = f.fork()
  <- j.join1()

func fork() -> Join:
    in: *string
    out: *string
    join1 = () -> []string:
      inJoin: *string
      for i <- in rec:
        inJoin <<- i
      for o <- out rec:
        inJoin <<- o
      join in!
      par join out!
      <- inJoin
    in <<- "something in INSIDE"
    out <<- "something out INSIDE"
    <- Join(join1)

func complexTest() -> []string, []string:
  out: *string
  f = Fork(fork = fork)
  j <- f.fork()
  strs <- j.join1()
  out <<- "something out OUTSIDE"
  <- strs, out

aqua Stream

import "@fluencelabs/aqua-lib/builtin.aqua"
import "println.aqua"

export Stringer
export checkStreams, returnStreamFromFunc
export stringEmpty, returnEmptyLiteral
export returnNilLength, stringNone
export streamFunctor, streamAssignment
export streamIntFunctor, streamJoin

service Stringer("stringer-id"):
    returnString: string -> string

func checkStreams(ch: []string) -> []string:
    stream: *string
    stream <- Stringer.returnString("first")
    stream <- Stringer.returnString("second")
    for b <- ch:
        stream <- Stringer.returnString(b)
    <- stream

func getStream() -> *u32:
    nums = *[1,2,3,4]
    <- nums

func returnStreamFromFunc() -> *u32:
    nums <- getStream()
    <- nums

func stringEmpty() -> *string:
    valueNil: *string
    <- valueNil

func returnEmpty() -> *string:
    relayNil <- stringEmpty()
    <- relayNil

func returnEmptyLiteral() -> *string:
    empty: *string
    -- TODO: return *[] here after LNG-280
    <- empty

func returnNilLength() -> u32:
    arr = nil
    <- arr.length

func stringNone() -> ?string:
    valueNone: *string
    <- valueNone

func returnNone() -> ?string:
    relayNone <- stringNone()
    <- relayNone

func streamFunctor(arr: []string) -> string:
   stream: *[]string
   stream <<- ["123"]
   a = stream[arr.length - 1][0]
   <- a

func streamAssignment(arr: []string) -> string:
   stream: *[]u32
   stream <<- [0]
   a = stream[arr.length - 1][0]
   b = arr[a]
   <- b

func streamIntFunctor(arr: []u32) -> string:
   stream: *[]string
   stream <<- ["123"]
   a = stream[arr[0]][arr[0]]
   <- a

func streamJoin(arr: []string) -> string:
   streamJ: *[]string
   streamJ <<- ["111", "222"]
   streamJ <<- ["333", "444"]
   <- streamJ[arr.length][1]

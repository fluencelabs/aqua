module Closure declares *

import "@fluencelabs/aqua-lib/builtin.aqua"

export LocalSrv, closureIn, closureOut, closureBig, closureOut2, lng58Bug, multipleClosuresBugLNG262, lng317Bug

service MyOp("op"):
  identity(s: string) -> string

service LocalSrv("local_srv"):
  inside: -> ()

func closureIn(peer1: string) -> string:
  variable = "const"
  co on peer1:
    p1Id <- MyOp.identity("co on")
  closure = (s: string) -> string:
    if s == "in":
        LocalSrv.inside()
    p2Id <- MyOp.identity(s)
    <- p2Id
  p <- closure("in")
  <- p

func closureOut(peer2: string) -> Info:
  on peer2:
      closure = (s: string) -> Info:
        if s == "in":
            LocalSrv.inside()
        p2Id <- Peer.identify()
        <- p2Id
  p2Id <- closure("on")
  <- p2Id

func closureOut2(peer2: string) -> Info:
  closure = func (s: string) -> Info:
    if s == "in":
        LocalSrv.inside()
    p2Id <- Peer.identify()
    <- p2Id
  on peer2:
    p2Id <- closure("on")
  <- p2Id


func closureBig(peer1: string, peer2: string) -> string, string:
  variable = "const"
  co on peer1:
    p1Id <- MyOp.identity("co on")
  closure = func (s: string) -> string:
    p2Id: *string
    if s == "in":
      p2 <- MyOp.identity(s)
      p2Id <<- p2
    else:
      p2Info <- Peer.identify()
      p2Id <<- p2Info.external_addresses!0
    <- p2Id!
  p <- closure("in")
  on peer2:
      p2Id <- closure("on")
  <- p, p2Id

func lng58Bug() -> string:
  status: *string
  waiting = ():
      avava: *string
      avava <<- "frerf"
      status <<- "ok"
  
  waiting()

  <- status!

func create(a: i8) -> -> i8:
    closureArrow = () -> i8:
        <- a
    <- closureArrow

func multipleClosuresBugLNG262() -> i8, i8:
    arr1 <- create(1)
    arr2 <- create(2)
    <- arr1(), arr2()

ability WorkerJob:
  runOnSingleWorker(w: string) -> []string

func runJob(j: -> []string) -> []string:
  <- j()

func disjoint_run{WorkerJob}() -> -> []string:
  run = func () -> []string:
      r <- WorkerJob.runOnSingleWorker("a")
      <- r
  <- run

func empty() -> string:
  a = "empty"
  <- a

func lng317Bug() -> []string:

   res: *string

   outer = () -> string:
     <- empty()

   clos = () -> -> []string:
     job2 = () -> []string:
       res <- outer()
       res <- MyOp.identity("identity")
       <- res
     <- job2
   worker_job = WorkerJob(runOnSingleWorker = clos())
   subnet_job <- disjoint_run{worker_job}()
   finalRes <- runJob(subnet_job)
   <- finalRes
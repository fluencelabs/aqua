aqua StructCreation declares getObj, getObjRelay, getObjAssign

export getObj, getObjRelay, getObjAssign, getObjFor

import "@fluencelabs/aqua-lib/builtin.aqua"

data InnerObj:
    arr: []string
    num: u32

data SomeObj:
    str: string
    num: u64
    inner: InnerObj

service OpNum("op"):
    identity(n: u32) -> u32

service OpStr("op"):
    identity(n: string) -> string

service OpArr("op"):
    identity(arr: []string) -> []string

func getObj() -> SomeObj:
    <- SomeObj(str = OpStr.identity("some str"), num = 5, inner = InnerObj(arr = ["a", "b", "c"], num = 6))

func getObjRelay() -> SomeObj:
    on HOST_PEER_ID:
        obj = SomeObj(str = "diff str", num = 5, inner = InnerObj(arr = OpArr.identity(["a", "b", "c"]), num = 6))
        Op.noop()
    <- obj.copy(str = "some str")

func getObjAssign() -> SomeObj, SomeObj, u32:
    obj = SomeObj(str = "first str",
                  num = OpNum.identity(5),
                  inner = InnerObj(arr = ["d", "e", "f"], num = 7)
                  )
    copiedObj = obj.copy(str = "some str", inner = obj.inner.copy(arr = ["a", "b", "c"])).copy(num = 6)
    <- obj, copiedObj, copiedObj.inner.copy(arr = ["g"]).arr.length

func getObjFor() -> []SomeObj:
    all: *SomeObj

    arr = [
           SomeObj(str = "first", num = OpNum.identity(1), inner = InnerObj(arr = ["1", "1", "1"], num = 11)),
           SomeObj(str = "second", num = OpNum.identity(2), inner = InnerObj(arr = ["2", "2", "2"], num = 22)),
           SomeObj(str = "third", num = OpNum.identity(3), inner = InnerObj(arr = ["3", "3", "3"], num = 33))
          ]

    for obj <- arr:
      copied = obj.copy(str = Op.concat_strings(obj.str, " copied"), inner = obj.inner.copy(arr = ["copy"]))
      all <<- copied

    arri = [1, 2, 3]
    for i <- arri:
      obj = SomeObj(str = "for", num = OpNum.identity(i), inner = InnerObj(arr = [], num = i))
      all <<- obj

    <- all



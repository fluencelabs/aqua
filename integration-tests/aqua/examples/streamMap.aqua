aqua StreamMapTest declares *

export testGetFunc, testGetStreamFunc, testKeysFunc, testContainsFunc

func testGetFunc() -> []string, []string, []string:
  streamMap: %string
  key = "key"
  resEmpty = streamMap.get(key)
  streamMap <<- (key, "first value")
  resFirst = streamMap.get(key)
  streamMap <<- (key, "second value")
  resSecond = streamMap.get(key)
  <- resEmpty, resFirst, resSecond

func testGetStreamFunc() -> []string, string, string:
  streamMap: %string
  key = "key"
  resEmptyStream = streamMap.getStream(key)
  streamMap <<- (key, "first value")
  resFirstStream = streamMap.getStream(key)
  streamMap <<- (key, "second value")
  resSecondStream = streamMap.getStream(key)
  resFirst = resFirstStream[0]
  resSecond = resSecondStream[1]
  <- resEmptyStream, resFirst, resSecond

func testKeysFunc() -> []string, []string, []string:
  streamMap: %string
  resEmpty = streamMap.keys()
  streamMap <<- ("key one", "")
  resFirst = streamMap.keys()
  streamMap <<- ("key two", "")
  resSecond = streamMap.keys()
  <- resEmpty, resFirst, resSecond

func testContainsFunc() -> bool, bool, bool, bool, bool:
  keyOne = "key one"
  keyTwo = "key two"
  streamMap: %string
  resFirst = streamMap.contains(keyOne)
  streamMap <<- (keyOne, "")
  resSecond = streamMap.contains(keyOne)
  resThird = streamMap.contains(keyTwo)
  streamMap <<- (keyOne, "new")
  streamMap <<- (keyTwo, "")
  resFourth = streamMap.contains(keyOne)
  resFifth = streamMap.contains(keyTwo)
  <- resFirst, resSecond, resThird, resFourth, resFifth